<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeBase</name>
    </assembly>
    <members>
        <member name="T:CodeBase.ODMessageBox">
            <summary>Jordan 6/5/2022 This class only exists because of the shortcomings of the old ODProgress.cs.
            Once that progress bar is gone, we can remove this class also.
            Purposefully overrides or hides System.Windows.Forms.MessageBox from any extending namespace.
            This is so that we can inject our own code prior to System.Windows.Forms.MessageBox.Show().
            This is necessary when a separate thread has UI and the owner thread needs to show a message box.
            The idea behind this class is for any project to create its own MessageBox class that simply extends this one.
            This will successfully hide System.Windows.Forms.MessageBox for the entire namespace of the extending class.
            E.g. see OpenDental.MessageBox for more details.
            Side note: Visual Studio may suggest simplifying MessageBox.Show() to ODMessageBox.Show().  Do not do this.  Either ignore the suggestion
            or go remove the suggestion entirely in the Visual Studio settings.  To remove this suggestion from the OpenDental project...
            Expand the References node in the Solution Explorer of the desired project > right click on Analyzers > Open Active Rule Set > 
            Once the ruleset editor is open, search for IDE0002 and uncheck the check box > Save (a warning will show about making a new file).</summary>
        </member>
        <member name="M:CodeBase.ODMessageBox.Show(System.String)">
            <summary>Shows a message to the user.  Automatically checks to see if a progress window is showing and will ask the progress window
            to show the message to the user so that the progress window doesn't cover up the question.</summary>
        </member>
        <member name="M:CodeBase.ODMessageBox.Show(System.String,System.String)">
            <summary>Shows a message to the user.  Automatically checks to see if a progress window is showing and will ask the progress window
            to show the message to the user so that the progress window doesn't cover up the question.</summary>
        </member>
        <member name="M:CodeBase.ODMessageBox.Show(System.Windows.Forms.IWin32Window,System.String)">
            <summary>Shows a message to the user.  Automatically checks to see if a progress window is showing and will ask the progress window
            to show the message to the user so that the progress window doesn't cover up the question.</summary>
        </member>
        <member name="M:CodeBase.ODMessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>Shows a message to the user.  Automatically checks to see if a progress window is showing and will ask the progress window
            to show the message to the user so that the progress window doesn't cover up the question.</summary>
        </member>
        <member name="M:CodeBase.ODMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>Shows a message to the user.  Automatically checks to see if a progress window is showing and will ask the progress window
            to show the message to the user so that the progress window doesn't cover up the question.</summary>
        </member>
        <member name="M:CodeBase.ODMessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>Shows a message to the user.  Automatically checks to see if a progress window is showing and will ask the progress window
            to show the message to the user so that the progress window doesn't cover up the question.</summary>
        </member>
        <member name="M:CodeBase.ODMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>Shows a message to the user.  Automatically checks to see if a progress window is showing and will ask the progress window
            to show the message to the user so that the progress window doesn't cover up the question.</summary>
        </member>
        <member name="M:CodeBase.ODMessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>Shows a message to the user.  Automatically checks to see if a progress window is showing and will ask the progress window
            to show the message to the user so that the progress window doesn't cover up the question.</summary>
        </member>
        <member name="M:CodeBase.ODMessageBox.ShowHelper(System.Func{CodeBase.FormProgressBase,System.Windows.Forms.DialogResult},System.Func{System.Windows.Forms.DialogResult})">
            <summary>Invokes one of the funcs passed in based on if there are any active progress windows showing and has focus.
            Will invoke funcShowProgress if a progress window is active.  Otherwise; invokes funcShow.
            Recursively calls itself as needed if the active progress window was in the middle of closing when this method was invoked.</summary>
            <param name="funcShowOverProgress">The func that should execute if a progress window is currently showing to the user.</param>
            <param name="funcShow">The func that should execute if no progress window is currently showing to the user.</param>
            <returns>The dialog result from the func that ended up getting invoked.</returns>
        </member>
        <member name="M:CodeBase.Controls.ODWebView2.ClearCache">
            <summary>Makes a call to dev tools to clear WebView2 browser cache. Use a fire and forget pattern as you shouldn't care about the result of this method.</summary>
        </member>
        <member name="F:CodeBase.Controls.ODWebView2.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodeBase.Controls.ODWebView2.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodeBase.Controls.ODWebView2.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CodeBase.OpenGLWinFormsControl">
            <summary>
            A Windows Forms control that supports OpenGL rendering using the Tao library.
            </summary>
        </member>
        <member name="E:CodeBase.OpenGLWinFormsControl.TaoRenderScene">
            <summary>
            A user-defined event that renders the scene (called during each redraw).
            </summary>
        </member>
        <member name="E:CodeBase.OpenGLWinFormsControl.TaoSetupContext">
            <summary>
            A user-defined event that sets up the OpenGL context (called once during TaoInitializeContexts).
            </summary>
        </member>
        <member name="E:CodeBase.OpenGLWinFormsControl.TaoControlSizeChanged">
            <summary>
            A user-defined event that's called when the control resizes
            (by default, the control resets the viewport and redraws itself).
            </summary>
        </member>
        <member name="E:CodeBase.OpenGLWinFormsControl.TaoOpenGLError">
            <summary>
            Fired whenever an error occurs during rendering.
            </summary>
        </member>
        <member name="P:CodeBase.OpenGLWinFormsControl.TaoRenderEnabled">
            <summary>
            Enables / disables rendering. IMPORTANT: This property is initially set to false to allow for smooth designing.
            You MUST set this to true before any rendering will take place.
            </summary>
        </member>
        <member name="P:CodeBase.OpenGLWinFormsControl.ContextsReady">
            <summary>
            True if both the device and rendering contexts have been created
            </summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl._DescribePixelFormat(System.IntPtr,System.Int32,System.UInt32,Tao.Platform.Windows.Gdi.PIXELFORMATDESCRIPTOR@)">
            <summary>Creates an unmanaged reference to DescribePixelFormat(), which is used to choose an appropriate device pixel format for the current OS and video card.</summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.CreateContexts(System.IntPtr,System.Int32)">
            <summary>
            Creates the device and rendering contexts using the supplied settings
            in accumBits, colorBits, depthBits, and stencilBits. Returns the selected
            pixel format number.
            </summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.DisposeContext">
            <summary>
            Deletes both the device and rendering contexts if they've been created.
            </summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.MakeCurrentContext">
            <summary>
            Sets this control's OpenGL context as the current context.
            </summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.DrawDesignBackground(System.Drawing.Graphics)">
            <summary>
            Draws the design-mode background for the control.
            By default, a message is displayed to inform the user that the control is in design mode
            and how they can switch to rendering mode.
            </summary>
            <param name="controlGraphics"></param>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.GetPixelFormats(System.IntPtr)">
            <summary>Returns the pixel formats from 1 to Max(maximumCount,maximum available pixel formats).</summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.FormatUsesPalette(Tao.Platform.Windows.Gdi.PIXELFORMATDESCRIPTOR)">
            <summary>Does the pixel format support a color palette?</summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.FormatSupportsAcceleration(Tao.Platform.Windows.Gdi.PIXELFORMATDESCRIPTOR)">
            <summary>Returns true if the given pixel format supports some kind of hardware acceleration, false if the format is a software only graphics.</summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.FormatSupportsOpenGL(Tao.Platform.Windows.Gdi.PIXELFORMATDESCRIPTOR)">
            <summary>Returns true if the given pixel format supports OpenGL rendering, false otherwise.</summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.FormatSupportsWindow(Tao.Platform.Windows.Gdi.PIXELFORMATDESCRIPTOR)">
            <summary>Returns true if the given pixel format supports windowed rendering, false otherwise.</summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.FormatSupportsBitmap(Tao.Platform.Windows.Gdi.PIXELFORMATDESCRIPTOR)">
            <summary>Returns true if the given pixel format supports bitmapped rendering, false otherwise.</summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.FormatSupportsDoubleBuffering(Tao.Platform.Windows.Gdi.PIXELFORMATDESCRIPTOR)">
            <summary>Returns true if the given pixel format supports double-buffering, false otherwise.</summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.ChoosePixelFormatEx(System.IntPtr)">
            <summary>Tries to automatically select the pixel format which will be most efficient if it works. Use in the case that the program is being loaded for the first time.</summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.TaoInitializeContexts(System.Int32)">
            <summary>Returns the selected pixel format of the tooth chart.</summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.TaoInitializeContexts(System.IntPtr,System.Int32)">
            <summary>
            Creates device and rendering contexts then fires the user-defined SetupContext event
            (if the contexts have not already been created). Call this in your initialization routine.
            Returns the selected pixel format for the tooth chart.
            </summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.TaoDraw">
            <summary>
            Call this method to redraw the control every frame (internally, this calls Invalidate)
            </summary>
        </member>
        <member name="M:CodeBase.OpenGLWinFormsControl.ReadFrontBuffer">
            <summary>Reads the contents of the front OpenGL drawing surface and returns an unaltered, unscaled copy as an image. The idea is that one would first draw using OpenGL, perform a swap (if double buffering), then read the contents of the resulting image to perform an operation on it, then use the final image for rendering.</summary>
        </member>
        <member name="P:CodeBase.SizeChangedEventArgs.NewSize">
            <summary>
            The new size of the control that has been resized.
            </summary>
        </member>
        <member name="P:CodeBase.OpenGLErrorEventArgs.Description">
            <summary>
            A brief description of the error.
            </summary>
        </member>
        <member name="P:CodeBase.OpenGLErrorEventArgs.ErrorCode">
            <summary>
            The OpenGL error code.
            </summary>
        </member>
        <member name="F:CodeBase.PrintPanel.backBuffer">
            <summary>Draw to this back buffer, then the window display will take care of the rest.</summary>
        </member>
        <member name="F:CodeBase.PrintPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodeBase.PrintPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodeBase.PrintPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CodeBase.FormProgressBase">
            <summary>A base window designed to run in a separate thread so that the progress bar can smoothly spin without waiting on the main thread.
            Takes care of registering and unregistering for the ODEvent passed into the constructor.
            Also takes care of making sure that this window does not get "stuck" open by spawning a thread that monitors if CloseGracefully has been called.
            Extending classes are supposed to take care of the desired UI.  Does not extend ODForm on purpose.</summary>
        </member>
        <member name="F:CodeBase.FormProgressBase._typeEvent">
            <summary>The specific type of ODEvent that should be fired / monitored.  Can be null which will default to a generic ODEvent.</summary>
        </member>
        <member name="F:CodeBase.FormProgressBase._odEventType">
            <summary>The specific type of ODEvent that should be fired / monitored.  Can be null which will default to a generic ODEvent.</summary>
        </member>
        <member name="F:CodeBase.FormProgressBase.ForceClose">
            <summary>An indicator owned by Open Dental indicating that this progress window needs to close regardless if it is done computing or not.
            Set to true by the entity that instantiated this progress form to gracefully close when the long computation has finished.</summary>
        </member>
        <member name="F:CodeBase.FormProgressBase._hasClosed">
            <summary>An indicator if this form has closed itself and no longer needs to monitor the ForceClose boolean.</summary>
        </member>
        <member name="F:CodeBase.FormProgressBase._eventInfoFired">
            <summary>The "Fired" event that is currently registered to this form.  This is used when registering to custom ODEvents.
            It is necessary to keep track of so that we can unregister it when this progress window is closed.</summary>
        </member>
        <member name="M:CodeBase.FormProgressBase.#ctor">
            <summary>Required for VS designer.</summary>
        </member>
        <member name="M:CodeBase.FormProgressBase.MsgBoxShow(System.String,System.String)">
            <summary>Shows a message to the user with this progress window as the owner.</summary>
        </member>
        <member name="M:CodeBase.FormProgressBase.MsgBoxShow(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>Shows a message to the user with this progress window as the owner.</summary>
        </member>
        <member name="M:CodeBase.FormProgressBase.MsgBoxShow(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>Shows a message to the user with this progress window as the owner.</summary>
        </member>
        <member name="M:CodeBase.FormProgressBase.UpdateProgress(System.String,CodeBase.ProgressBarHelper,System.Boolean)">
            <summary>Extending classes are required to implement this method.
            This class was originally an abstract class which made this fact apparent but Visual Studio's designer doesn't play nicely.</summary>
        </member>
        <member name="T:CodeBase.FormProgressExtended">
            <summary>Do not instatiate this class.  It is not meant for public use.  Use ODProgress.ShowProgressExtended() instead.
            Launch this window in a separate thread so that the progress bar can smoothly spin without waiting on the main thread.
            This form has a custom UI that is designed to dynamically add up to 10 progress bars (see AddNewProgressBar() for more details).</summary>
        </member>
        <member name="F:CodeBase.FormProgressExtended._listProgressBars">
            <summary>Progress bars that have already been added to the form.</summary>
        </member>
        <member name="E:CodeBase.FormProgressExtended.ProgressPaused">
            <summary>Event is fired when the user clicks the pause/resume button.</summary>
        </member>
        <member name="E:CodeBase.FormProgressExtended.ProgressCanceled">
            <summary>Event is fired when the user clicks the cancel button.</summary>
        </member>
        <member name="F:CodeBase.FormProgressExtended._isPaused">
            <summary>True if the user clicked Pause, set back to false when the user clicks Resume.</summary>
        </member>
        <member name="F:CodeBase.FormProgressExtended._isDone">
            <summary>True if progress has been completed and the Done event has been called. </summary>
        </member>
        <member name="M:CodeBase.FormProgressExtended.#ctor(CodeBase.ODEventType,System.Type,System.Boolean,System.String)">
            <summary>Do not instatiate this class.  It is not meant for public use.  Use ODProgress.ShowProgressExtended() instead.
            Launches a progress window that will constantly spin and display status updates for global ODEvents with corresponding name.
            eventType must be a Type that contains an event called Fired.</summary>
        </member>
        <member name="M:CodeBase.FormProgressExtended.AddNewProgressBar(System.String,System.String,System.String,System.Int32,System.Int32,System.String,CodeBase.ProgBarStyle,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Creates a new progress bar and adds it to the form.  Returns null if there are more than 10 progress bars.</summary>
        </member>
        <member name="F:CodeBase.FormProgressExtended.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodeBase.FormProgressExtended.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodeBase.FormProgressExtended.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CodeBase.FormProgressStatus">
            <summary>Launch this window in a separate thread so that the progress bar can smoothly spin without waiting on the main thread.
            Invoke CloseGracefully() in order to have the window gracefully close (as to not rely on thread abort).</summary>
        </member>
        <member name="F:CodeBase.FormProgressStatus._hasHistory">
            <summary>Indicates that this progress form is in "history" mode which will show a text box with all messages it takes action on and then will stay open forcing the user to click Close.</summary>
        </member>
        <member name="F:CodeBase.FormProgressStatus._dateTimeLastEvent">
            <summary>The date and time of the most recent event that this form processed.</summary>
        </member>
        <member name="F:CodeBase.FormProgressStatus._dateTimeInit">
            <summary>The date and time that this form was initialized.  Used to help calculate the total time.</summary>
        </member>
        <member name="M:CodeBase.FormProgressStatus.#ctor(CodeBase.ODEventType,System.Type,System.Boolean,System.Boolean,System.String,System.Windows.Forms.ProgressBarStyle)">
            <summary>Do not instatiate this class.  It is not meant for public use.  Use ODProgress.ShowProgressStatus() instead.
            Launches a progress window that will constantly spin and display status updates for global ODEvents with corresponding name.
            eventType must be a Type that contains an event called Fired.</summary>
        </member>
        <member name="M:CodeBase.FormProgressStatus.GetElapsedTime(System.DateTime,System.DateTime)">
            <summary>Gets a user friendly elapsed time message to display in the history text box.</summary>
        </member>
        <member name="F:CodeBase.FormProgressStatus.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodeBase.FormProgressStatus.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodeBase.FormProgressStatus.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CodeBase.IODProgressExtended">
            <summary>This interface is useful for use with FormProgressExtended especially when there are certain situations where you don't want to display
            the FormProgressExtended.</summary>
        </member>
        <member name="P:CodeBase.IODProgressExtended.IsPaused">
            <summary>Gets the status of the pause button.</summary>
        </member>
        <member name="P:CodeBase.IODProgressExtended.IsCanceled">
            <summary>Gets the status of the canceled button</summary>
        </member>
        <member name="M:CodeBase.IODProgressExtended.AllowResume">
            <summary>Sets the pause button to enabled and changes the text to say resume.</summary>
        </member>
        <member name="M:CodeBase.IODProgressExtended.HideButtons">
            <summary>Sets the pause and cancel buttons to invisible on the form</summary>
        </member>
        <member name="M:CodeBase.IODProgressExtended.UpdateProgress(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>Updates or makes a new progress bar with any of the options chosen. Tag string determines which bar you want to update when using more
            than one.</summary>
            <summary>Simplified version of UpdateProgressDetailed. Options are pre-set for a block bar, with text on top of the bar and on the right.</summary>
        </member>
        <member name="M:CodeBase.IODProgressExtended.IsPauseOrCancel">
            <summary>If paused, method will wait and return false once 'resume' is pressed. Cancel will be handled outside of this method and will return true.</summary>
        </member>
        <member name="M:CodeBase.IODProgressExtended.OnProgressDone">
            <summary>Changes the text of the cancel button to close.</summary>
        </member>
        <member name="T:CodeBase.ODProgressExtendedNull">
            <summary>Null progress bar. If no progress bar exists due to lack of UI then the bar will do nothing. </summary>
        </member>
        <member name="M:CodeBase.ODProgressExtendedNull.Fire(CodeBase.ODEventArgs)">
            <summary></summary>
        </member>
        <member name="M:CodeBase.ODProgressExtendedNull.UpdateProgress(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary></summary>
        </member>
        <member name="T:CodeBase.ODProgress">
            <summary>Deprecated.  Use ProgressOD instead.</summary>
        </member>
        <member name="F:CodeBase.ODProgress._lockProgressCur">
            <summary>Explicit locker for _listFormProgresses.</summary>
        </member>
        <member name="F:CodeBase.ODProgress._listActiveProgressForms">
            <summary>Used for keeping track of active progress windows.  Multiple progress windows can be shown at the same time.</summary>
        </member>
        <member name="P:CodeBase.ODProgress.FormProgressActive">
            <summary>Gets the last progress window in the static list of currently opened progress windows.  Returns null when no active progress windows.
            The last progress window should be the most recent and thus the one showing to the user (on top of other progress windows).
            This is treated as the "active progress window" and all message boxes should be ran from its context.</summary>
        </member>
        <member name="M:CodeBase.ODProgress.Show(CodeBase.ODEventType,System.Type,System.String,System.Boolean,System.Boolean,System.Windows.Forms.ProgressBarStyle)">
            <summary>Non-blocking call. Shows a progress window that will listen for ODEvents in order to update the label and progress bar.
            The progress window that is shown to the user is owned by a separate thread so that the main thread can continue to execute.
            This type of progress window is good for showing progress when manipulating UI elements on the main thread (filling grids).
            It is up to the calling method to let notify this progress window when it should close by invoking the action returned.</summary>
            <param name="odEventType">Causes the progress window to only process ODEvents of this ODEventType.  Undefined will process all types.</param>
            <param name="typeEvent">Causes the progress window to only process ODEvents of this Type.  Null defaults to typeof(ODEvent).</param>
            <param name="startingMessage">Sets the label of the progress window to the value passed in.  Defaults to "Please Wait..."
            It is always up to the calling method to translate this message before passing it in.  This is to avoid translating multiple times.</param>
            <param name="hasHistory">Set to true if the progress window should show a history of events that it has processed.
            This will cause the UI of the progress window to change slightly and will also make it so the user has to click a Close button.</param>
            <param name="hasMinimize">Set to true if the progress window should allow minimizing.  False by default.</param>
            <param name="progStyle">Sets the style of the progress bar within the progress window that is going to be shown to the user.</param>
            <returns>An action that will close the progress window.  Invoke this action whenever long computations are finished.</returns>
        </member>
        <member name="M:CodeBase.ODProgress.ShowExtended(CodeBase.ODEventType,System.Type,System.Windows.Forms.Form,System.Object,CodeBase.ProgressCanceledHandler,CodeBase.ProgressPausedHandler,System.String)">
            <summary>Non-blocking call. FormProgressExtended is an extremely tailored version of FormProgressStatus.
            It is a progress window that can have multiple progress bars showing at the same time with pause and cancel functionality.
            This "extended" progress window is exactly like the "Show()" progress window in that the close action that is returned must be invoked
            by the calling method in order to programmatically close.</summary>
            <param name="odEventType">Causes the progress window to only process ODEvents of this ODEventType.  Undefined will process all types.</param>
            <param name="typeEvent">Causes the progress window to only process ODEvents of this Type.  Null defaults to typeof(ODEvent).</param>
            <param name="currentForm">The form to activate once the progress is done. If you cannot possibly pass in a form, it is okay to pass in null.</param>
            <param name="tag">Optionally set tag to an object that should be sent as the first "event arg" to the new progress window.
            This will typically be a ProgressBarHelper or a string.</param>
            <param name="progCanceled">Optionally pass in a delegate that will get invoked when the user clicks Cancel.</param>
            <param name="progPaused">Optionally pass in a delegate that will get invoked when the user clicks Pause.</param>
            <returns>An action that will close the progress window.  Invoke this action whenever long computations are finished.</returns>
        </member>
        <member name="M:CodeBase.ODProgress.ShowAction(System.Action,System.String,System.Action{System.Exception},System.Type,CodeBase.ODEventType,System.Windows.Forms.ProgressBarStyle,System.Boolean,System.Boolean)">
            <summary>This is a blocking call. Runs the action on the main thread and displays a progress window on another thread.
            Once the long computation has completed, then the progress window will automatically be closed.
            Throws any exceptions that occurred within the action if no exception delegate was provided.</summary>
            <param name="actionComputation">Any long computation.  Returns and does nothing if null.</param>
            <param name="startingMessage">Sets the label of the progress window to the value passed in.  Defaults to "Please Wait..."
            It is always up to the calling method to translate this message before passing it in.  This is to avoid translating multiple times.</param>
            <param name="actionException">A custom UE handler for the worker thread.  Null will cause this method to rethrow any exceptions.</param>
            <param name="typeEvent">Causes the progress window to only process ODEvents of this Type.  Null defaults to typeof(ODEvent).</param>
            <param name="odEventType">Causes the progress window to only process ODEvents of this ODEventType.  Undefined will process all types.</param>
            <param name="progStyle">Sets the style of the progress bar within the progress window that is going to be shown to the user.</param>
            <param name="hasMinimize">Set to true if the progress window should allow minimizing.  False by default.</param>
            <param name="hasHistory">Set to true if the progress window should show a history of events that it has processed.
            This will cause the UI of the progress window to change slightly and will also make it so the user has to click a Close button.</param>
        </member>
        <member name="M:CodeBase.ODProgress.ShowProgressBase(System.Func{CodeBase.FormProgressBase},System.String)">
            <summary>Non-blocking call. Every type of progress window should eventually call this method which does the hard stuff for the calling method.
            Spawns a separate thread that will instantiate a FormProgressBase within the new thread's context by invoking the func passed in.
            The FormProgressBase that funcGetNewProgress returns should be a form that is instatiated within the func (in order to avoid cross-threading).
            The global static FormProgressCurS will get set to the newly instantiated progress so that the entire application knows progress is showing.
            Finally returning a close action for the calling method to invoke whenever long computations are finished.
            Two critical portions of the closing method are 1 - it closes progress gracefully and 2 - FormProgressCurS gets set to null.</summary>
        </member>
        <member name="P:CodeBase.ODProgressBar.BlockValue">
            <summary>Changes progress bar current block value</summary>
        </member>
        <member name="P:CodeBase.ODProgressBar.BlockMax">
            <summary>Changes progress bar max value</summary>
        </member>
        <member name="P:CodeBase.ODProgressBar.TagString">
            <summary>Used to uniquely identify this ODEvent for consumers. Can be null</summary>
        </member>
        <member name="P:CodeBase.ODProgressBar.ProgressStyle">
            <summary>Changes progress bar style</summary>
        </member>
        <member name="P:CodeBase.ODProgressBar.MarqueeSpeed">
            <summary>Changes progress bar marquee speed</summary>
        </member>
        <member name="M:CodeBase.ODProgressBar.LayoutHelper">
            <summary>Changes the layout of the labels and other controls based on current property values.</summary>
        </member>
        <member name="F:CodeBase.ODProgressBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodeBase.ODProgressBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodeBase.ODProgressBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CodeBase.ODProgressExtended">
            <summary>A wrapper for FormProgressExtended.</summary>
        </member>
        <member name="M:CodeBase.ODProgressExtended.#ctor(CodeBase.ODEventType,CodeBase.IODEvent,System.Windows.Forms.Form,System.Object,CodeBase.ProgBarStyle,System.String,System.String)">
            <param name="currentForm">The form to activate once the progress is done. If you cannot possibly pass in a form, it is okay to pass in null.
            </param>
        </member>
        <member name="M:CodeBase.ODProgressExtended.UpdateProgressDetailed(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,CodeBase.ProgBarStyle,CodeBase.ProgBarEventType)">
            <summary>Initializes a new bar or updates the progress bar with more specific information</summary>
        </member>
        <member name="M:CodeBase.ODProgressExtended.UpdateProgress(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Updates progress bar with a top label and a percent value. Tagstring needs to be associated to the bar that is reciving the change. 
            </summary>
        </member>
        <member name="M:CodeBase.ODProgressExtended.IsPauseOrCancel">
            <summary>Checks if progress is paused and waits if it is. If progress gets canceled (while paused or not) returns true</summary>
        </member>
        <member name="F:CodeBase.ProgressBarHelper.LabelValue">
            <summary>Used to set text in other controls to be displayed to the user like labels, text boxes, etc.</summary>
        </member>
        <member name="F:CodeBase.ProgressBarHelper.PercentValue">
            <summary>Used to set the label on the right of the progress bar</summary>
        </member>
        <member name="F:CodeBase.ProgressBarHelper.BlockValue">
            <summary>Changes progress bar current block value</summary>
        </member>
        <member name="F:CodeBase.ProgressBarHelper.BlockMax">
            <summary>Changes progress bar max value</summary>
        </member>
        <member name="F:CodeBase.ProgressBarHelper.TagString">
            <summary>Used to uniquely identify this ODEvent for consumers. Can be null.</summary>
        </member>
        <member name="F:CodeBase.ProgressBarHelper.ProgressStyle">
            <summary>Changes progress bar style</summary>
        </member>
        <member name="F:CodeBase.ProgressBarHelper.ProgressBarEventType">
            <summary>Indicates what event this progress bar helper represents.  Used heavily by FormProgressExtended.</summary>
        </member>
        <member name="F:CodeBase.ProgressBarHelper.MarqueeSpeed">
            <summary>Changes progress bar marquee speed</summary>
        </member>
        <member name="M:CodeBase.ProgressBarHelper.#ctor(System.String,System.String,System.Int32,System.Int32,CodeBase.ProgBarStyle,System.String,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,CodeBase.ProgBarEventType)">
            <summary>Used as a shell to store information events need to update a progress window.</summary>
        </member>
        <member name="T:CodeBase.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CodeBase.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CodeBase.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:CodeBase.DateTime_">
            <summary>This class is useful when testing in order to mock DateTime.Now. In the real code, substitute DateTime.Now with DateTime_.Now, and
            in the tests, override DateTime_GetNow to change the current time.</summary>
        </member>
        <member name="F:CodeBase.DateTime_._getNow">
            <summary>Set this func to return a custom value for DateTime_.Now. If not overridden, will return the real DateTime.Now.</summary>
        </member>
        <member name="P:CodeBase.DateTime_.IsNowModified">
            <summary>True if DateTime_.Now will return a custom value.</summary>
        </member>
        <member name="P:CodeBase.DateTime_.Now">
            <summary>The Now time based on DateTime_.GetNow.</summary>
        </member>
        <member name="P:CodeBase.DateTime_.Today">
            <summary>The Today date based on DateTime_.GetNow.</summary>
        </member>
        <member name="M:CodeBase.DateTime_.SetNow(System.Func{System.DateTime})">
            <summary>Call this method to return a custom value for DateTime_.Now. If not called, will return the real DateTime.Now.</summary>
        </member>
        <member name="M:CodeBase.DateTime_.ResetNow">
            <summary>Call this method to make DateTime_.Now return the normal DateTime.Now.</summary>
        </member>
        <member name="T:CodeBase.DrCephArgs">
            <summary>Class used to carry arguments to pass into the DrCeph launch method.</summary>
        </member>
        <member name="T:CodeBase.ODClipboard">
            <summary></summary>
        </member>
        <member name="M:CodeBase.ODClipboard.Clear">
            <summary>Clears the clipboard.  For ODCloud this will set the clipboard to an empty string instead, since the clear function doesn't work for ODCloud.  Also, for ODCloud
            this will use System.Windows.Clipboard since System.Windows.Forms.Clipboard causes heap corruption and crashes OD with ntdll.dll errors in ODCloud.</summary>
        </member>
        <member name="M:CodeBase.ODClipboard.SetClipboard(System.String)">
            <summary>Writes the text to the user's clipboard.  For ODCloud this will use System.Windows.Clipboard since System.Windows.Forms.Clipboard causes heap corruption and
            crashes OD with ntdll.dll errors in ODCloud.</summary>
        </member>
        <member name="M:CodeBase.ODClipboard.GetText">
            <summary>Gets the contents of the user's clipboard as text.</summary>
        </member>
        <member name="M:CodeBase.ODClipboard.GetImage">
            <summary>Gets the contents of the user's clipboard as an image. Returns null if the clipboard does not contain an image.</summary>
        </member>
        <member name="M:CodeBase.ODClipboard.GetFileDropList">
            <summary>
            Gets the contents of the user's clipboard as a list of file paths. Returns null if the clipboard does not contain any files.
            If ODCloud, files are transferred from the ODCloudClient to the temp opendental directory and the new paths are returned.
            </summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.SendDataToBrowser">
            <summary>Used for OD Cloud. This delegate will be invoked to send data to the browser.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.GetLatestCloudClientVersion">
            <summary>Used to get the latest cloud client version number from HQ.</summary>
        </member>
        <member name="T:CodeBase.ODCloudClient.SendDataToBrowserDelegate">
            <summary>Used for OD Cloud. This delegate is used to send data to the browser.</summary>
            <param name="data">Data to send to the browser.</param>
            <param name="browserAction">Action the browser should perform. Based off <see cref="T:CodeBase.ODCloudClient.BrowserAction"></see>.</param>
            <param name="onReceivedResponse">If the browser returns a response, this action can act upon it.</param>
        </member>
        <member name="T:CodeBase.ODCloudClient.GetLatestCloudClientVersionDelegate">
            <summary>Used to get the latest cloud client version number from HQ.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.LaunchFileWithODCloudClient(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends a request to ODCloudClient to launch the file.
            </summary>
            <param name="exePath">Path for program to be launched</param>
            <param name="extraArgs"></param>
            <param name="extraFilePath"></param>
            <param name="extraFileData"></param>
            <param name="extraFileType"></param>
            <param name="doWaitForResponse"></param>
            <param name="createDirIfNeeded"></param>
            <param name="tryLaunch">Setting this to true will have the client check and see if the process is already running before attempting to launch it</param>
        </member>
        <member name="M:CodeBase.ODCloudClient.CheckOrCreateWithODCloudClient(System.String,CodeBase.ODCloudClient.CloudClientAction)">
            <summary>Sends a request to ODCloudClient to check if a directory exists or create a directory.</summary>
             <param name="directoryName"></param>
             <param name="action"></param>
        </member>
        <member name="M:CodeBase.ODCloudClient.GetProcessNameFromPath(System.String)">
            <summary>Grabs the process name from the exe file path to see if it's currently running on the client's computer</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.GetClipboardFilesFromODCloudClient">
            <summary>Synchronously requests the clipboard files from the client's FileDropList and places them in '.../temp/opendental/ODCloudFileTransfer'.</summary>
            <returns>string[] of paths to the files in the temp directory</returns>
        </member>
        <member name="M:CodeBase.ODCloudClient.GetFileTransferTempPath">
            <summary>Returns '.../temp/opendental/ODCloudFileTransfer' temp path.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.GetImageFromScanner(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>Synchronously scans an image using the client computer's scanners.</summary>
            <returns>Bitmap of the image scanned.</returns>
        </member>
        <member name="M:CodeBase.ODCloudClient.GetImageMultiFromScanner(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>Synchronously scans multiple image using the client computer's scanners.</summary>
            <returns>Path to the temporary file (located at the temp path) containing the image.</returns>
        </member>
        <member name="M:CodeBase.ODCloudClient.SetDefaultScanner">
            <summary>Uses devices on the client side. Asks ODCloudClient to prompt the user to select a scanner and sets that scanner as the default.
            Returns true if the default scanner was successfully updated. Returns false if the request timed out or the user clicked 'cancel'.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.ProcessPaymentTerminal(System.String,System.Decimal,System.Boolean,System.String)">
            <summary>Asks ODCloudClient to process a PayConnect terminal payment. If successful, returns the contents of the PosResponse object. Otherwise, returns null.
            Type can be 'SALE', 'AUTH', 'VOID', 'RETURN'</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.WriteFile(System.String,System.String,System.Boolean)">
            <summary>Sends a request to ODCloudClient to write the claim data to the specified file and archive any old claims.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.GetTwainSourceList">
            <summary>Uses devices on the client side. Asks ODCloudClient to get the list of sources as a list of Twain Names. Returns an empty list on error.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.TwainInitializeDevice(System.Boolean)">
            <summary>Initializes the Cloud Client's TWAIN driver. Throws ODException or Exception on error.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.TwainAcquireBitmap(System.String,System.Boolean,System.Int32)">
            <summary>Acquires a single bitmap from the TWAIN device given by the Twain Name</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.ExportClaim(System.String,System.String,System.Boolean)">
            <summary>Sends a request to ODCloudClient to write the claim data to the specified file and archive any old claims.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.LaunchIfNotRunning">
            <summary>If the Cloud Client is not running, launch it. This will also reconnect the API WebSocket if it is closed and the API is enabled.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.ProcessApiRequest(System.String)">
            <summary>Process the api request. Parses the request data ot of requestString and sends it to the API service.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.SendToSirona(System.String,System.Collections.Generic.List{System.String})">
            <summary>Sends a message to ODCloudClient to launch Sirona.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.DownloadString(System.String,System.Int32,System.Boolean)">
            <summary>Makes an HTTP GET request to the specified URL and returns the response.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.SendToBrowser(CodeBase.ODCloudClient.ODBrowserData,CodeBase.ODCloudClient.BrowserAction)">
            <summary>Sends the data to the browser.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.SendToBrowserSynchronously(System.String,CodeBase.ODCloudClient.BrowserAction,System.Int32,System.Boolean)">
            <summary>Sends the data to the browser and waits for a response.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.DoCheckLatestCloudClientVersion">
            <summary>
            Gets the latest cloud client version from HQ and updates the in-memory version and date last checked if it is time to do so. 
            Returns true if the version should be checked by the cloud client, otherwise false.
            </summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.ODCloudAuthGoogleListener(System.String)">
            <summary>Sends a request to the OpenDentalCloudClient to run the CloudClientAction ODCloudAuthGoogleListener to start
            an HttpListener that listens for response from google authentication</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.SendListenerResponse(System.String,System.String)">
            <summary>Sends the GoogleAuthCodeResponseHtml and state to the OpenDenalCloudClient SendListenerResponse method to
            send a response to Google via the HttpListenerContext.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.GetRedirectUri">
            <summary>Sends a request to the OpenDentalCloudClient to run the CloudClientAction GetRedirectUri to get our redirect URI</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.CloseListener">
            <summary>Sends a request to the OpenDentalCloudClient to run the CloudClientAction CloseListener, to close the httplistener</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.CheckIsListening">
            <summary>Sends a request to the OpenDentalCloudClient to run the CloudClientAction CheckIsListening, to check if the httplistener is listening</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.SendToODCloudClientSynchronously(CodeBase.ODCloudClient.ODCloudClientData,CodeBase.ODCloudClient.CloudClientAction,System.Int32,System.Boolean)">
            <summary>Sends a requests to ODCloudClient and waits for a response. Throws any exception that ODCloudClient returns.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.SendToODCloudClient(CodeBase.ODCloudClient.ODCloudClientData,CodeBase.ODCloudClient.CloudClientAction)">
            <summary>Sends a request to ODCloudClient.</summary>
        </member>
        <member name="M:CodeBase.ODCloudClient.TerminateDuplicateCloudClientProcesses">
            <summary>Close duplicate Cloud Client processes</summary>
        </member>
        <member name="T:CodeBase.ODCloudClient.ODBrowserData">
            <summary>Contains the data to be sent to the browser to perfrom a browser action. Will be serialized as JSON.</summary>
        </member>
        <member name="T:CodeBase.ODCloudClient.ODCloudClientData">
            <summary>Contains the data to be sent to OD Cloud Client. Will be serialized as JSON.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.ExePath">
            <summary>The path of the executable to launch. Can be empty if FilePath is set.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.Args">
            <summary>Arguments to pass to ExePath when launched.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.FilePath">
            <summary>Path to write FileData to.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.FileData">
            <summary>File contents to write to FilePath.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.FileType">
            <summary>Options are "binary" or "text".</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.DoStartWithoutExtraFile">
            <summary>Defaults to false. Whether to start start the process if the extra file can't be created. If false and the extra file can't be created, throws an exception.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.DoOverwriteFile">
            <summary>Defaults to true. Whether to overwrite FilePath. If false and FilePath exists, throws an exception.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.CreateDirIfNeeded">
            <summary>If included, will create the directory if it doesn't exist.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.ScanDocSelectSource">
            <summary>Defaults to true. Whether the scanner selection window should be displayed.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.ScanDocShowOptions">
            <summary>Defaults to false. Whether the scaner options window should be displayed.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.ScanDocDuplex">
            <summary>Defaults to false. Whether the scaner should use duplex mode.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.ScanDocGrayscale">
            <summary>Defaults to false. Whether the scaner should scan in grayscale if scanDocShowOptions is false.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.ScanDocResolution">
            <summary>The resolution the scanner should use if scanDocShowOptions is false.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.ScanDocQuality">
            <summary>The JPEG compression quality the scanner should use if scanDocShowOptions is false.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.PayConnectType">
            <summary>The PayConnect transaction type used for processing a payment from a terminal. Values are: SALE, AUTH, VOID, RETURN</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.PayConnectAmount">
            <summary>The PayConnect transaction amount.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.PayConnectRefNum">
            <summary>The PayConnect transaction reference number. Used for some RETURN transactions.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.PayConnectForceDuplicate">
            <summary>Whether the PayConnect PosRequest should 'Force Duplicate'.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.OtherData">
            <summary>Any additional data that is necessary for this action type.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.ProcessName">
            <summary>Process name that needs to be checked for when the action is a TryLaunch</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.LatestCloudClientVersion">
            <summary>The latest version number of the ODCloudClient.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.DoCheckVersion">
            <summary>Indicates that the browser should prompt the user if their ODCloudClient is not the latest version.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.State">
            <summary>A random 32 byte string, base64 encoded. Sent with the auth request. Google returns it with their response
            so we can confirm that thier response is for our application's request.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientData.MicrosoftRefreshToken">
            <summary>Any error thrown while trying to perform acquisition will be held here.</summary>
        </member>
        <member name="T:CodeBase.ODCloudClient.ODCloudClientArgs">
            <summary>Contains the arguments to be sent to OD Cloud Client. Will be serialized as JSON.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientArgs.Data">
            <summary>This will be a JSON serialized string of <see cref="T:CodeBase.ODCloudClient.ODCloudClientData"/>.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientArgs.Signature">
            <summary>A signature of Data to prove this is from on Open Dental server.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientArgs.PublicKey">
            <summary>The public key that corresponds to the private key used to sign the Signature.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientArgs.isApiEnabled">
            <summary>True if the ODCloudClient should listen for API Service requests and relay them to the VM, otherwise false.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.ODCloudClientArgs.Action">
            <summary>The action that should be performed for this request.</summary>
        </member>
        <member name="P:CodeBase.ODCloudClient.ODCloudClientArgs.ActionEnum">
            <summary>The enum version of the action that should be performed.</summary>
        </member>
        <member name="T:CodeBase.ODCloudClient.CloudClientResult">
            <summary>Structure for the response that is sent back to JavaScript for any request coming to ODCloudClient.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientResult.ResultData">
            <summary>The response from the request.</summary>
        </member>
        <member name="P:CodeBase.ODCloudClient.CloudClientResult.ResultCodeStr">
            <summary>String representation of the ResultCode.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientResult.ResultCode">
            <summary>Code to identify the result of the request.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientResult.ClientVersion">
            <summary>Current cloud client version number.</summary>
        </member>
        <member name="P:CodeBase.ODCloudClient.CloudClientResult.ResultCodeEnum">
            <summary>Enum representation of the ResultCode.</summary>
        </member>
        <member name="T:CodeBase.ODCloudClient.CloudClientAction">
            <summary>Different action types that can be sent to ODCloudClient.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.LaunchFile">
            <summary>Asks ODCloudClient to launch a file. May also write data to a file.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.CheckIsRunning">
            <summary>Checks if ODCloudClient is running.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.ExportClaim">
            <summary>Writes the claim data to the specified file and archives any old claims.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.SendToSirona">
            <summary>Launches the Sirona bridge.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.DownloadString">
            <summary>Makes an HTTP GET request to the specified URL and returns the response.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.GetComputerName">
            <summary>Gets the name of the computer the browser is running on.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.GetClipboardFiles">
            <summary>Gets the contents of the user's clipboard as a list of files.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.GetImageFromScanner">
            <summary>Gets the image from a scanner device as a bitmap.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.GetImageMultiFromScanner">
            <summary>Gets multiple images from a scanner device as a .pdf file containing the image.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.SetDefaultScanner">
            <summary>Asks ODCloudClient to prompt the user to select a default scanner.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.PayConnectProcessPaymentTerminal">
            <summary>Asks ODCloudClient to process a PayConnect terminal payment and return the contents of PosResponse.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.WriteFile">
            <summary>Asks ODCloudClient to write a file with the given text at the given path.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.TryLaunch">
            <summary>Call this enum action if you just want to make sure that a process is running before trying to call it</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.SendToDrCeph">
            <summary>Launches the DrCeph bridge</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.GetTwainSourceList">
            <summary>Gets the list of the client's available TWAIN sources by their Twain Name.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.TwainInitializeDevice">
            <summary>Initialize a TWAIN device. This is its own action in case there are multiple TwainAcquireBitmap calls in a row.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.TwainAcquireBitmap">
            <summary>Asks ODCloudClient to acquire a single image from the TWAIN device. Assumes the device has already been initialized using TwainInitializeDevice.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.IsProcessRunning">
            <summary>Check the workstation's running processes</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.ODCloudAuthGoogleListener">
            <summary>Starts an HttpListener to listen for response from google authentication</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.SendListenerResponse">
            <summary>Sends a response to Google via the HttpListenerContext.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.GetRedirectUri">
            <summary>Returns the first Prefix of the HttpListener which should be our redirect URI.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.CloseListener">
            <summary>Closes the HttpListener if it is not null. If you close the listener but intend to use this AuthorizationRequest again,
            you must call StartListener() again.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.CheckIsListening">
            <summary>Check if HttpListener is listening on the ODCloudClient</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.CreateDirectory">
            <summary>Call this enum action if you want to create a directory on the client machine.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.CheckForDirectory">
            <summary>Call this enum action if you want to check if a directory exists on the client machine.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.GetMicrosoftAccessToken">
            <summary>Get microsoft access token on the ODCloudClient</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.MicrosoftSignOutUser">
            <summary>Signs out the passed in user from the account information. If there was an exception it will be held within the MicrosoftTokenHelper.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.HttpListenerGetContext">
            <summary>Start HttpListener.GetContext on the cloudclient</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientAction.TerminateDuplicateCloudClientProcesses">
            <summary>Close duplicate Cloud Client processes</summary>
        </member>
        <member name="T:CodeBase.ODCloudClient.BrowserAction">
            <summary>Tells the browser what action to take with the data passed to it.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.BrowserAction.SendToODCloudClient">
            <summary>Pass the data on to ODCloudClient.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.BrowserAction.SetClipboard">
            <summary>Write the data to the user's clipboard.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.BrowserAction.GetClipboardText">
            <summary>Gets the contents of the user's clipboard as text.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.BrowserAction.GetClipboardImage">
            <summary>Get the contents of the user's clipboard as an image.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.BrowserAction.GetComputerName">
            <summary>Gets the name of the computer the browser is running on.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.BrowserAction.PlaySound">
            <summary>Plays the sound on the browser.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.BrowserAction.NavigateIframe">
            <summary>Plays the sound on the browser.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.BrowserAction.SetIframeVisible">
            <summary>Plays the sound on the browser.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.BrowserAction.SendToODCloudClientSocket">
            <summary>Pass the data on to ODCloudClient via the websocket. Used for API traffic.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.BrowserAction.CheckODCloudClientViaBrowser">
            <summary>Check if ODCloudClient is running via the browser and ask if they want to download or launch</summary>
        </member>
        <member name="T:CodeBase.ODCloudClient.CloudClientResultCode">
            <summary>Enum to identify the result of the request.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientResultCode.Success">
            <summary>The request completed successfully.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientResultCode.IdentifierMismatch">
            <summary>The ODCloudClient that received the request was not the one the browser meant to send it to.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientResultCode.Error">
            <summary>The request was unable to be completed. Unknown error.</summary>
        </member>
        <member name="F:CodeBase.ODCloudClient.CloudClientResultCode.ODException">
            <summary>An ODException was thrown. ResultData will contain a serialized ODException.</summary>
        </member>
        <member name="T:CodeBase.PayConnectResponse">
            <summary>Response class that can hold information for a web service response or a terminal response.</summary>
        </member>
        <member name="F:CodeBase.PayConnectResponse.TransactionType.Sale">
            <summary>0 - Sale</summary>
        </member>
        <member name="F:CodeBase.PayConnectResponse.TransactionType.Authorize">
            <summary>1 - Authorize</summary>
        </member>
        <member name="F:CodeBase.PayConnectResponse.TransactionType.Refund">
            <summary>2 - Refund</summary>
        </member>
        <member name="F:CodeBase.PayConnectResponse.TransactionType.Capture">
            <summary>3 - Capture</summary>
        </member>
        <member name="F:CodeBase.PayConnectResponse.TransactionType.Void">
            <summary>4 - Void</summary>
        </member>
        <member name="F:CodeBase.PayConnectResponse.TransactionType.Unknown">
            <summary>5 - Unknown</summary>
        </member>
        <member name="M:CodeBase.SoundHelper.PlaySound(System.Byte[])">
            <summary>If running in ODCloud, converts the given byte array to base64 and sends the data asynchronously to the browser to be played.
            Otherwise, plays the sound asynchronously using SoundPlayer.Play().</summary>
        </member>
        <member name="M:CodeBase.SoundHelper.PlaySoundSync(System.Byte[])">
            <summary>If running in ODCloud, converts the given byte array to base64 and sends the data synchronously to the browser to be played.
            Otherwise, plays the sound synchronously using SoundPlayer.PlaySync().</summary>
        </member>
        <member name="T:CodeBase.SymbolExtensions">
            <summary>Extensions to find methodinfo from method calls. 
            Source: http://blog.functionalfun.net/2009/10/getting-methodinfo-of-generic-method.html </summary>
        </member>
        <member name="M:CodeBase.SymbolExtensions.GetMethodInfo(System.Linq.Expressions.Expression{System.Action})">
            <summary>Given a lambda expression that calls a method, returns the method info.</summary>
        </member>
        <member name="M:CodeBase.SymbolExtensions.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>Given a lambda expression that calls a method, returns the method info.</summary>
        </member>
        <member name="M:CodeBase.SymbolExtensions.GetMethodInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>Given a lambda expression that calls a method, returns the method info.</summary>
        </member>
        <member name="M:CodeBase.SymbolExtensions.GetMethodInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>Given a lambda expression that calls a method, returns the method info.  Throws an exception if no method found.</summary>
        </member>
        <member name="M:CodeBase.ConvertWebCore.BytesToString(System.Byte[],System.Boolean)">
            <summary>Convert byte array to a string.
            outputAsHex: If true then returned string hex, which doubles the size, but can safely be sent over SOAP. In the form of a hex string, EG "D1FF34DE".
            If false then returned string is roughly the same size as the unencrypted string (plus 16 bytes or so) and is NOT safe to send over SOAP. 
            The characters are ascii between 0-255, EG "☺☻⌡≡M♫".
            If you aren't sure use outputAsHex=true. outputAsHex=false is typically only used for socket transmissions and encryption.</summary>
        </member>
        <member name="M:CodeBase.ConvertWebCore.StringToBytes(System.String,System.Boolean)">
            <summary>Convert ledgible hex string to byte array.
            inputIs7BitAscii: If true then input string must be ledible ascii (characters 0-127), EG "AB12D1FF34DE".
            If false then input string can be UTF8 (characters 0-255). 
            If you aren't sure use inputIs7BitAscii=true. inputIs7BitAscii=false is typically only used for socket transmissions and encryption.</summary>
        </member>
        <member name="M:CodeBase.ConvertWebCore.GetObfuscatedString(System.String)">
            <summary>Convert plain text to illedgible text.  Just a simple way to keep user from tampering with arguments sent over URL.  GWT app has a reverse algorigthm to convert back to plain text.</summary>
        </member>
        <member name="M:CodeBase.ConvertWebCore.DeobfuscateString(System.String)">
            <summary>Convert obfuscated string back to plain text. Text must be originally obfuscated using GetObfuscatedString().</summary>
        </member>
        <member name="M:CodeBase.ConvertWebCore.CreateSimpleCheckSum(System.String)">
            <summary>Convert a string to a relatively unique numeric representation.  GWT app has a similar algorithm that will allow simple checksum compare of strings.  Assures that strings have not been tampered with.</summary>
        </member>
        <member name="M:CodeBase.ConvertWebCore.ValidateCheckSum(System.String,System.Int32)">
            <summary>Create a checksum from the input string and validate it against the input checksum. Returns true if match, false is mismatch.</summary>
        </member>
        <member name="T:CodeBase.DebugLogging">
            <summary>Convert objects to strings. Useful for logging.</summary>
        </member>
        <member name="M:CodeBase.DebugLogging.DebugString``1(``0)">
            <summary>Convert any object type to a loggable string for debugging. Keeps the string to one single line. Use overload to define prefix and suffix of each line.</summary>
        </member>
        <member name="M:CodeBase.DebugLogging.DebugString``1(``0,System.String,System.String,System.String)">
            <summary>Convert any list of any object type to a loggable string for debugging. Each member can be prefixed with any string and suffixed with any string.</summary>
        </member>
        <member name="M:CodeBase.DebugLogging.DebugStringForList``1(System.Collections.Generic.List{``0})">
            <summary>Convert any list of any object type to a loggable string for debugging. Each member is prefixed with spaces and suffixed with new line.</summary>
        </member>
        <member name="T:CodeBase.Conv`2">
            <summary>A conversion class that helps change objects of one type to the other type.
            <para>Used when C#'s "Convert" class or simply casting to other types is not sufficient.  E.g. converting a list of objects to a list of another object type.</para></summary>
            <typeparam name="TypeCur">The type of the object that you are converting from.</typeparam>
            <typeparam name="TypeTo">The type of the object that you are converting to.</typeparam>
        </member>
        <member name="M:CodeBase.Conv`2.L(System.Collections.Generic.List{`0})">
            <summary>List conversion.  Converts one list to a list of another type.  
            <para>If the type of object being converted cannot convert to the desired type, a runtime exception will occur instead of a compile exception.</para>
            <para>Make sure that any use of this method is tested before releasing code to the public.</para></summary>
            <param name="listTypeCur">The list of objects that need to be converted to a list of another type.  Typically a list of objects.</param>
            <returns>A list of the desired type.</returns>
        </member>
        <member name="T:CodeBase.DateDefaultToday">
            <summary>This struct can be used when you want an optional parameter that defaults to DateTime.Today if the parameter is not included.</summary>
        </member>
        <member name="P:CodeBase.DateDefaultToday.Date">
            <summary>The DateTime stored. Will be DateTime.Today if it has not been set.</summary>
        </member>
        <member name="M:CodeBase.DateDefaultToday.op_Implicit(System.DateTime)~CodeBase.DateDefaultToday">
            <summary>This operator allows you to pass in a DateTime to a method that accepts a DateDefaultToday.</summary>
        </member>
        <member name="T:CodeBase.DateRange">
            <summary>An object that represents a range of dates.</summary>
        </member>
        <member name="F:CodeBase.DateRange.Start">
            <summary>The beginning of the date range.</summary>
        </member>
        <member name="F:CodeBase.DateRange.End">
            <summary>The end of the date range.</summary>
        </member>
        <member name="M:CodeBase.DateTimeOD.GetMostRecentValidDate(System.Int32,System.Int32,System.Int32)">
            <summary>Returns the most recent valid date possible based on the year and month passed in.
            E.g. y:2017,m:4,d:31 is passed in (an invalid date) which will return a date of "04/30/2017" which is the most recent 'valid' date.
            Throws an exception if the year is not between 1 and 9999, and if the month is not between 1 and 12.</summary>
        </member>
        <member name="M:CodeBase.DateTimeOD.GetDateTimeHourAndMins(System.DateTime)">
            <summary>Returns a new DateTime that only preserves the date, hours, and minutes from the dateTime passed in.</summary>
        </member>
        <member name="M:CodeBase.DateTimeOD.NormalizeApplicationShortDateFormat">
            <summary>Sets the short date format to a standardized format so all dates are interpreted with a four digit year format.  All threads in the application will use this format regardless of the computer's region settings.  Throws an exception if the format could not be normalized.</summary>
        </member>
        <member name="M:CodeBase.DateTimeOD.Between(System.DateTime,System.DateTime,System.DateTime)">
            <summary>Returns true if the inputDate is between dateStart and dateEnd.</summary>
        </member>
        <member name="M:CodeBase.DateTimeOD.BetweenInclusive(System.DateTime,System.DateTime,System.DateTime)">
            <summary>Returns true if the inputDate is between dateStart and dateEnd. Includes the dateStart and dateEnd</summary>
        </member>
        <member name="M:CodeBase.DateTimeOD.CalculateForEndOfMonthOffset(System.DateTime,System.Int32)">
            <summary>Finds the greatest date which is considered to be the given number of months in the past.  Does not consider the time, just the date.
            Ex: March 31st minus 1 month is Feb. 28th or 29th, but the result we want is March 1st.</summary>
        </member>
        <member name="P:CodeBase.IODProgress.LanThis">
            <summary>Used within translations as the sender object</summary>
        </member>
        <member name="M:CodeBase.IODProgress.UpdateProgress(System.String)">
            <summary>Updates the status textbox with a new message.</summary>
        </member>
        <member name="M:CodeBase.IODProgress.UpdateProgressDetailed(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,CodeBase.ProgBarStyle,CodeBase.ProgBarEventType)">
            <summary>Updates the progress bar with these details.</summary>
        </member>
        <member name="T:CodeBase.ODProgressDoNothing">
            <summary>Progress bar where all methods do nothing. Can be used when there can be no progress bar due to a lack of UI. 
            This is an implementation of the Null Object Pattern.</summary>
        </member>
        <member name="F:CodeBase.ODProgressDoNothing._instance">
            <summary>A singleton instance of this class that can be used repeatedly so that each consumer doesn't have to create a new object.</summary>
        </member>
        <member name="F:CodeBase.ProgBarStyle.Blocks">
            <summary>Usually used for percentage based progress.</summary>
        </member>
        <member name="F:CodeBase.ProgBarStyle.Marquee">
            <summary>Usually used to indicate ongoing processing (no percentage).</summary>
        </member>
        <member name="F:CodeBase.ProgBarStyle.Continuous">
            <summary>This is an older option not supported by Window when visual styles are not enabled. Do not use.</summary>
        </member>
        <member name="T:CodeBase.ProgBarEventType">
            <summary>When a progress bar event fires, use these event types to indicate to FormProgressExtended what needs to happen.
            These events can cause progress bars to change or cause the form itself to behave in specific ways.
            E.g. Use BringToFront to cause FormProgressExtended to come to the front of all other windows.
            The most common event will be ProgressBar in order to update the progress visually to the user.  It needs to be the first in the enum.</summary>
        </member>
        <member name="F:CodeBase.ProgBarEventType.ProgressBar">
            <summary>The default event type.  Adds a new progress bar or updates a current progress bar with the corresponding settings.</summary>
        </member>
        <member name="F:CodeBase.ProgBarEventType.BringToFront">
            <summary>Brings FormProgressExtended to the front.</summary>
        </member>
        <member name="F:CodeBase.ProgBarEventType.Header">
            <summary>Sets the Text property of FormProgressExtended to LabelValue.</summary>
        </member>
        <member name="F:CodeBase.ProgBarEventType.ProgressLog">
            <summary>Sets the Text property of the label just above the text box to LabelValue in FormProgressExtended.</summary>
        </member>
        <member name="F:CodeBase.ProgBarEventType.TextMsg">
            <summary>Appends LabelValue to the text box in FormProgressExtended.</summary>
        </member>
        <member name="F:CodeBase.ProgBarEventType.WarningOff">
            <summary>Hides the warning label and enables the Pause button in FormProgressExtended and then sets the Text property of said button to "Resume".</summary>
        </member>
        <member name="F:CodeBase.ProgBarEventType.AllowResume">
            <summary>Does the same thing as the WarningOff event.</summary>
        </member>
        <member name="F:CodeBase.ProgBarEventType.Done">
            <summary>Sets the Text property of the Close button in FormProgressExtended to "Close" and disables the pause button.</summary>
        </member>
        <member name="F:CodeBase.ProgBarEventType.HideButtons">
            <summary>Sets pause and cancel buttons on the bottom of the form to invisible. </summary>
        </member>
        <member name="T:CodeBase.Logger">
            <summary>Used to log messages to our internal log file, or to other resources, such as message boxes.</summary>
        </member>
        <member name="M:CodeBase.Logger.SeverityToString(CodeBase.Logger.Severity)">
            <summary>Convert a severity code into a string.</summary>
        </member>
        <member name="M:CodeBase.Logger.UseMyDocsDirectory">
            <summary>Used to write the logger file to the MyDocuments directory to avoid having to run OD as admin. Use sparingly, should only be called once per application instance.</summary>
        </member>
        <member name="M:CodeBase.Logger.Log(System.String,CodeBase.Logger.Severity)">
            <summary>Log a message from an unknown source.</summary>
        </member>
        <member name="M:CodeBase.Logger.Log(System.Object,System.String,System.String,System.Boolean,CodeBase.Logger.Severity)">
            <summary>Log a message to the log text file and add a description of the sender (for debugging purposes). If sender is null then a description of the sender is not printed. Always returns false so that a calling boolean function can return at the same time that it logs an error message.</summary>
        </member>
        <member name="T:CodeBase.Logger.Severity">
            <summary>Levels of logging severity to indicate importance.</summary> 
        </member>
        <member name="F:CodeBase.Logger.logRollByteCount">
            <summary>The number of bytes it takes to move the current log to the backup/old log, to prevent the log files from growing infinately.</summary>
        </member>
        <member name="F:CodeBase.Logger.level">
            <summary>Specifies the current logging level. Any severity less than the given level is not logged.</summary> 
        </member>
        <member name="F:CodeBase.Logger._canUseMyDocsDir">
            <summary>Boolean used to determine what directory the logger will write to.</summary>
        </member>
        <member name="F:CodeBase.Logger._loggerDirOverride">
            <summary>Can be set to change the directory the logger will write to.</summary>
        </member>
        <member name="P:CodeBase.Logger.LoggerDirOverride">
            <summary>Can be set to change the directory the logger will write to.</summary>
        </member>
        <member name="M:CodeBase.Logger.LogToPath(System.String,CodeBase.LogPath,CodeBase.LogPhase,System.String)">
            <summary>This method takes a string that should be some kind of an identifier (usually method name) for the method that is being logged. 
            The optional string is for any additional information the implementer finds useful to be in the log string. 
            LogPath determines the directory to log to and LogPhase determines whether the logger is a "Start" line or a "Stop" line.</summary>
        </member>
        <member name="M:CodeBase.Logger.LogAction(System.String,CodeBase.LogPath,System.Action,System.String)">
            <summary>Accomplishes the same function as LogSignals, but by using an action we can save on messy looking code for sections that need heavy logging.
            Should generally be used on one line statements. Jordan approves exception to rule against using anonymous methods inside arguments as long as it's a one liner. Don't throw a big block in here.</summary>
        </member>
        <member name="M:CodeBase.Logger.LogActionIfOverTimeLimit(System.String,CodeBase.LogPath,System.Action,System.Int32)">
            <summary>Accomplishes the same function as LogAction, but only logs if the given Action exceeds the given milliseconds.
            Should generally be used on one line statements.</summary>
        </member>
        <member name="M:CodeBase.Logger.GetCallingMethod">
            <summary>This method finds the method that called the logger. It loops through the first 5 stack frames and returns the full name of the 
            method that called it. This method carefully excludes its own calling methods from the stack trace.</summary>
        </member>
        <member name="M:CodeBase.Logger.LogVerbose(System.String,System.String)">
            <summary>If HasVerboseLogging(Environment.MachineName) then Logger.WriteLine(log). Otherwise do nothing.</summary>
        </member>
        <member name="M:CodeBase.Logger.CleanupLoggerDirectoryOncePerDay(System.Int32)">
            <summary>Runs the logger directory cleanup code once per day. Use daysOld to specify the age (in days) after which files should be deleted. </summary>
        </member>
        <member name="M:CodeBase.Logger.CleanupLoggerDirectoryAsync(System.Int32,System.Func{System.Boolean},System.Action{System.String},System.Action,System.Int32)">
            <summary>Starts a thread which cleans up the Logger directory. 
            Thread will be interrupted and stopped if doInterrupt returns true.
            Thread can also be interrupted from it's dorman state if the Action which is returned is invoked.
            Delete all files and folders under the Logger directory which are older than 30 days. 
            This method can take several minutes if there are are lot of files to process.
            If run once and exit is desired then set frequencyMS=0. Otherwise set frequencyMS to desired frequency of full scan.
            It is suggested that this scan run no more than once per day.</summary>
        </member>
        <member name="M:CodeBase.Logger.CleanupLoggerDirectory(System.Func{System.Boolean},System.Action{System.String},System.Int32)">
            <summary>Cleans up the Logger directory. 
            Can be interrupted and stopped if doInterrupt returns true.
            Delete all files and folders under the Logger directory which are older than 30 days. 
            This method can take several minutes if there are are lot of files to process.</summary>
        </member>
        <member name="M:CodeBase.Logger.ScrubSubDirPath(System.String)">
            <summary>The full path and file name will be kept safe by Logger itself. Logger will not create a path name that won't comply with Windows file system.
            The one exception is where we let the implementer set the subDirectory. This subDirectory could be any string so we will scrub that string here and make it comply.</summary>
        </member>
        <member name="M:CodeBase.ODBuild.IsWindows">
            <summary>Returns true if current build is for Windows OS.</summary>
        </member>
        <member name="M:CodeBase.ODBuild.IsDebug">
            <summary>Returns true if the current build is debug. Useful when you want the release code to show up when searching for references.</summary>
        </member>
        <member name="M:CodeBase.ODBuild.IsAlpha">
            <summary>Returns true if the current build is alpha. Useful when you want the release code to show up when searching for references.</summary>
        </member>
        <member name="M:CodeBase.ODBuild.IsWeb">
            <summary>Returns true if current build is using Virtual UI.</summary>
        </member>
        <member name="M:CodeBase.ODBuild.IsTrial">
            <summary>Returns true if current build is for the trial version only.</summary>
        </member>
        <member name="T:CodeBase.ODClassExtensions">
            <summary>Working on deprecating</summary>
        </member>
        <member name="M:CodeBase.ODClassExtensions.AsEnumerable``1(System.Collections.IEnumerable)">
            <summary>Deprecated. Use Cast instead.</summary>
        </member>
        <member name="F:CodeBase.ODInitialize.IsRunningInUnitTest">
            <summary>Indicates that the program is running unit tests.  Should only be set to true from TestBase.Initialize().
            Useful for methods that should behave differently in unit tests, such as FriendlyException.Show().</summary>
        </member>
        <member name="F:CodeBase.ODInitialize.HasInitialized">
            <summary>Indicates that Initialize has been invoked at least once and has successfully executed.</summary>
        </member>
        <member name="F:CodeBase.ODInitialize._listPackages">
            <summary>Indicates the list of packages that have already been custom loaded.</summary>
        </member>
        <member name="M:CodeBase.ODInitialize.Initialize">
            <summary>This method is called from all Open Dental programs or projects. This method can throw. There is a good
            chance you should not let the user continue if the method throws as it can cause the program to behave in unexpecting ways.</summary>
        </member>
        <member name="M:CodeBase.ODInitialize.FixPackageAssembly(System.String,System.String)">
            <summary>This will only load the assembly once, even if called multiple times.
            Some packages are widly popular, 3rd-party libraries reference different versions than what the current project expects.
            This can cause runtime errors like "Could not load file or assembly 'package...'". The best way to fix these errors is to update the
            3rd-party library to use a newer version of the package. If that option is not available, you can call this method to force any failed
            loads of the package to use the specified dll.</summary>
        </member>
        <member name="M:CodeBase.ODInvokeExtensions.Invoke(System.Windows.Forms.Control,System.Action)">
            <summary>Invoke an action on a control.</summary>
        </member>
        <member name="M:CodeBase.ODInvokeExtensions.InvokeIfRequired(System.Windows.Forms.Control,System.Action)">
            <summary>Invoke an action on a control if InvokeRequired is true.</summary>
        </member>
        <member name="M:CodeBase.ODInvokeExtensions.InvokeIfNotDisposed(System.Windows.Forms.Control,System.Action)">
            <summary>Invoke an action on a control. If the control is disposing or disposed, will return without performing the action.</summary>
        </member>
        <member name="M:CodeBase.ODInvokeExtensions.BeginInvoke(System.Windows.Forms.Control,System.Action)">
            <summary>BeginInvoke an action on a control.</summary>
        </member>
        <member name="M:CodeBase.DateSpan.#ctor(System.DateTime,System.DateTime)">
            <summary>Pass in the two dates that you want to compare. Results will be stored in YearsDiff, MonthsDiff, and DaysDiff.
            Always subtracts the smaller date from the larger date to return a positive (or 0) value.</summary>
        </member>
        <member name="M:CodeBase.DateSpan.GetYears(System.DateTime,System.DateTime)">
            <summary>Gets the number of years between the two passed-in dates.</summary>
        </member>
        <member name="T:CodeBase.LimitedSizeQueue`1">
            <summary>Creates a thread-safe queue with a size limit. 
            The queue will automatically dequeue any items in excess of the size limit when a new item is enqueued.</summary>
        </member>
        <member name="F:CodeBase.LimitedSizeQueue`1._limit">
            <summary>The size limitation that will be enforced on the concurrent queue every time an item attempts to enqueue.</summary>
        </member>
        <member name="F:CodeBase.LimitedSizeQueue`1._queue">
            <summary>The actual queue of items.  This queue will only store items up to the value that Limit was set to.
            E.g. this queue will automatically dequeue items when an item attempts to enqueue that would push the size of the queue past Limit.</summary>
        </member>
        <member name="P:CodeBase.LimitedSizeQueue`1.Limit">
            <summary>The size limitation that will be enforced on the concurrent queue every time an item attempts to enqueue.</summary>
        </member>
        <member name="M:CodeBase.LimitedSizeQueue`1.#ctor(System.Int32)">
            <summary>Creates a concurrent queue that will limit its size to the limit passed in.</summary>
        </member>
        <member name="M:CodeBase.LimitedSizeQueue`1.Enqueue(`0)">
            <summary>Adds an item to the queue and automatically dequeues any items in excess of the specified size limit.
            Returns true if successful.</summary>
        </member>
        <member name="M:CodeBase.LimitedSizeQueue`1.Enqueue(`0,`0@)">
            <summary>Adds an item to the queue and automatically dequeues any items in excess of the specified size limit.
            Returns true if successful. If an item is dequeued, returns the object as an out parameter.</summary>
        </member>
        <member name="M:CodeBase.LimitedSizeQueue`1.Dequeue">
            <summary>Tries to dequeue an item. Returns true if successful.</summary>
        </member>
        <member name="M:CodeBase.LimitedSizeQueue`1.Dequeue(`0@)">
            <summary>Tries to dequeue an item. Returns true if successful. Returns the dequeued object as an out parameter.</summary>
        </member>
        <member name="M:CodeBase.LimitedSizeQueue`1.Contains(`0)">
            <summary>See if the queue contains an item/</summary>
        </member>
        <member name="M:CodeBase.LimitedSizeQueue`1.GetEnumerator">
            <summary>Implement IEnumerator to allow iteration.</summary>
        </member>
        <member name="M:CodeBase.LimitedSizeQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>IEnumerator[T] inherits from IEnumerable and expects IEnumerable.GetEnumerator. Delegates to the generic implementation."/></summary>
        </member>
        <member name="M:CodeBase.ODMethodsT.Coalesce``1(``0)">
            <summary>Returns a new instance of T if input is null.</summary>
        </member>
        <member name="M:CodeBase.ODMethodsT.Coalesce``1(``0,``0)">
            <summary>Returns the specified defaultValue of T if input is null.</summary>
        </member>
        <member name="M:CodeBase.ODMethodsT.ValueIf``1(``0,``0,``0)">
            <summary>Returns the specified defaultValue of T if input is null or if input.ComparTo(checkAgainst)==0.</summary>
        </member>
        <member name="F:CodeBase.ODNetworkConnection._remoteName">
            <summary>Keep the network path around so that it can be used within Dispose() as to cancel the connection automatically.</summary>
        </member>
        <member name="M:CodeBase.ODNetworkConnection.#ctor(System.String,System.Net.NetworkCredential)">
            <summary>Creates a connection to a network resource via the remoteName and credentials passed in.
            Throws a Win32Exception with specific error code if WNetAddConnection2() fails.
            See https://msdn.microsoft.com/en-us/library/windows/desktop/aa385413(v=vs.85).aspx for more details.</summary>
            <param name="remoteName">The full network path to the desired network share.  Typically a UNC path.</param>
            <param name="remoteCredentials">The credentials that will be used when connecting to the share.  Only UserName and Password are used.</param>
        </member>
        <member name="M:CodeBase.ODNetworkConnection.WNetAddConnection2(CodeBase.NetResource,System.String,System.String,System.Int32)">
            <summary>The WNetAddConnection2 function makes a connection to a network resource and can redirect a local device to the network resource.
            The WNetAddConnection2 function supersedes the WNetAddConnection function. If you can pass a handle to a window that the provider of network 
            resources can use as an owner window for dialog boxes, call the WNetAddConnection3 function instead.
            See https://msdn.microsoft.com/en-us/library/windows/desktop/aa385413(v=vs.85).aspx for more details.</summary>
            <param name="lpNetResource">A pointer to a NETRESOURCE structure that specifies details of the proposed connection, 
            such as information about the network resource, the local device, and the network resource provider.</param>
            <param name="lpPassword">A pointer to a constant null-terminated string that specifies a password to be used in making the network connection.
            If lpPassword is NULL, the function uses the current default password associated with the user specified by the lpUserName parameter.
            If lpPassword points to an empty string,the function does not use a password.
            If the connection fails because of an invalid password and the CONNECT_INTERACTIVE value is set in the dwFlags parameter,the function displays 
            a dialog box asking the user to type the password.
            Windows Me/98/95:  This parameter must be NULL or an empty string.</param>
            <param name="lpUsername">A pointer to a constant null-terminated string that specifies a user name for making the connection.
            If lpUserName is NULL, the function uses the default user name. (The user context for the process provides the default user name.)
            The lpUserName parameter is specified when users want to connect to a network resource for which they have been assigned a user name or account
            other than the default user name or account.
            The user-name string represents a security context.It may be specific to a network provider.
            Windows Me/98/95:  This parameter must be NULL or an empty string.</param>
            <param name="dwFlags">A set of connection options. The possible values for the connection options are defined in the Winnetwk.h header file.</param>
            <returns>If the function succeeds, the return value is NO_ERROR.
            If the function fails, the return value can be an error code or one of the system error codes.</returns>
        </member>
        <member name="M:CodeBase.ODNetworkConnection.WNetCancelConnection2(System.String,System.Int32,System.Boolean)">
            <summary>The WNetCancelConnection2 function cancels an existing network connection. 
            You can also call the function to remove remembered network connections that are not currently connected.
            The WNetCancelConnection2 function supersedes the WNetCancelConnection function.
            See https://msdn.microsoft.com/en-us/library/windows/desktop/aa385427(v=vs.85).aspx for more details.</summary>
            <param name="lpName">Pointer to a constant null-terminated string that specifies the name of either the redirected local device or the remote
            network resource to disconnect from.
            If this parameter specifies a redirected local device,the function cancels only the specified device redirection.
            If the parameter specifies a remote network resource, all connections without devices are canceled.</param>
            <param name="dwFlags">Connection type. The following values are defined.
            0 - The system does not update information about the connection.
            CONNECT_UPDATE_PROFILE - The system updates the user profile with the information that the connection is no longer a persistent one.
            The system will not restore this connection during subsequent logon operations. 
            (Disconnecting resources using remote names has no effect on persistent connections.)</param>
            <param name="fForce">Specifies whether the disconnection should occur if there are open files or jobs on the connection.
            If this parameter is FALSE, the function fails if there are open files or jobs.</param>
            <returns>If the function succeeds, the return value is NO_ERROR.
            If the function fails, the return value is a system error code.</returns>
        </member>
        <member name="T:CodeBase.NetResource">
            <summary>The NETRESOURCE structure contains information about a network resource.
            See https://msdn.microsoft.com/en-us/library/windows/desktop/aa385353(v=vs.85).aspx for more details.</summary>
        </member>
        <member name="F:CodeBase.NetResource.dwScope">
            <summary>The scope of the enumeration. This member can be one of the following values defined in the Winnetwk.h header file.</summary>
        </member>
        <member name="F:CodeBase.NetResource.dwType">
            <summary>The type of resource. This member can be one of the following values defined in the Winnetwk.h header file.</summary>
        </member>
        <member name="F:CodeBase.NetResource.dwDisplayType">
            <summary>The display options for the network object in a network browsing user interface.
            This member can be one of the following values defined in the Winnetwk.h header file.</summary>
        </member>
        <member name="F:CodeBase.NetResource.dwUsage">
            <summary>A set of bit flags describing how the resource can be used.
            Note that this member can be specified only if the dwScope member is equal to RESOURCE_GLOBALNET.
            This member can be one of the following values defined in the Winnetwk.h header file.</summary>
        </member>
        <member name="F:CodeBase.NetResource.lpLocalName">
            <summary>If the dwScope member is equal to RESOURCE_CONNECTED or RESOURCE_REMEMBERED, this member is a pointer to a null-terminated character 
            string that specifies the name of a local device. This member is NULL if the connection does not use a device.</summary>
        </member>
        <member name="F:CodeBase.NetResource.lpRemoteName">
            <summary>If the entry is a network resource, this member is a pointer to a null-terminated character string 
            that specifies the remote network name.
            If the entry is a current or persistent connection, 
            lpRemoteName member points to the network name associated with the name pointed to by the lpLocalName member.
            The string can be MAX_PATH characters in length, and it must follow the network provider's naming conventions.</summary>
        </member>
        <member name="F:CodeBase.NetResource.lpComment">
            <summary>A pointer to a NULL-terminated string that contains a comment supplied by the network provider.</summary>
        </member>
        <member name="F:CodeBase.NetResource.lpProvider">
            <summary>A pointer to a NULL-terminated string that contains the name of the provider that owns the resource. 
            This member can be NULL if the provider name is unknown. 
            To retrieve the provider name, you can call the WNetGetProviderName function.</summary>
        </member>
        <member name="F:CodeBase.NetResourceScope.RESOURCE_CONNECTED">
            <summary>Enumerate currently connected resources. The dwUsage member cannot be specified.</summary>
        </member>
        <member name="F:CodeBase.NetResourceScope.RESOURCE_GLOBALNET">
            <summary>Enumerate all resources on the network. The dwUsage member is specified.</summary>
        </member>
        <member name="F:CodeBase.NetResourceScope.RESOURCE_REMEMBERED">
            <summary>Enumerate remembered (persistent) connections. The dwUsage member cannot be specified.</summary>
        </member>
        <member name="F:CodeBase.NetResourceType.RESOURCETYPE_ANY">
            <summary>All resources.</summary>
        </member>
        <member name="F:CodeBase.NetResourceType.RESOURCETYPE_DISK">
            <summary>Disk resources.</summary>
        </member>
        <member name="F:CodeBase.NetResourceType.RESOURCETYPE_PRINT">
            <summary>Print resources.</summary>
        </member>
        <member name="F:CodeBase.NetResourceDisplayType.RESOURCEDISPLAYTYPE_GENERIC">
            <summary>The method used to display the object does not matter.</summary>
        </member>
        <member name="F:CodeBase.NetResourceDisplayType.RESOURCEDISPLAYTYPE_DOMAIN">
            <summary>The object should be displayed as a domain.</summary>
        </member>
        <member name="F:CodeBase.NetResourceDisplayType.RESOURCEDISPLAYTYPE_SERVER">
            <summary>The object should be displayed as a server.</summary>
        </member>
        <member name="F:CodeBase.NetResourceDisplayType.RESOURCEDISPLAYTYPE_SHARE">
            <summary>The object should be displayed as a share.</summary>
        </member>
        <member name="F:CodeBase.NetResourceDisplayType.RESOURCEDISPLAYTYPE_FILE">
            <summary>The object should be displayed as a file.</summary>
        </member>
        <member name="F:CodeBase.NetResourceDisplayType.RESOURCEDISPLAYTYPE_GROUP">
            <summary>The object should be displayed as a group.</summary>
        </member>
        <member name="F:CodeBase.NetResourceDisplayType.RESOURCEDISPLAYTYPE_NETWORK">
            <summary>The object should be displayed as a network.</summary>
        </member>
        <member name="F:CodeBase.NetResourceDisplayType.RESOURCEDISPLAYTYPE_ROOT">
            <summary>The object should be displayed as a logical root for the entire network.</summary>
        </member>
        <member name="F:CodeBase.NetResourceDisplayType.RESOURCEDISPLAYTYPE_SHAREADMIN">
            <summary>The object should be displayed as a administrative share.</summary>
        </member>
        <member name="F:CodeBase.NetResourceDisplayType.RESOURCEDISPLAYTYPE_DIRECTORY">
            <summary>The object should be displayed as a directory.</summary>
        </member>
        <member name="F:CodeBase.NetResourceDisplayType.RESOURCEDISPLAYTYPE_TREE">
            <summary>The object should be displayed as a tree.  This display type was used for a NetWare Directory Service (NDS) tree 
            by the NetWare Workstation service supported on Windows XP and earlier.</summary>
        </member>
        <member name="F:CodeBase.NetResourceDisplayType.RESOURCEDISPLAYTYPE_NDSCONTAINER">
            <summary>The object should be displayed as a Netware Directory Service container.
            This display type was used by the NetWare Workstation service supported on Windows XP and earlier.</summary>
        </member>
        <member name="F:CodeBase.NetResourceUsage.RESOURCEUSAGE_CONNECTABLE">
            <summary>The resource is a connectable resource; the name pointed to by the lpRemoteName member can be passed to the WNetAddConnection function
            to make a network connection.</summary>
        </member>
        <member name="F:CodeBase.NetResourceUsage.RESOURCEUSAGE_CONTAINER">
            <summary>The resource is a container resource; the name pointed to by the lpRemoteName member can be passed to the WNetOpenEnum function to 
            enumerate the resources in the container.</summary>
        </member>
        <member name="F:CodeBase.NetResourceUsage.RESOURCEUSAGE_NOLOCALDEVICE">
            <summary>The resource is not a local device.</summary>
        </member>
        <member name="F:CodeBase.NetResourceUsage.RESOURCEUSAGE_SIBLING">
            <summary>The resource is a sibling. This value is not used by Windows.</summary>
        </member>
        <member name="F:CodeBase.NetResourceUsage.RESOURCEUSAGE_ATTACHED">
            <summary>The resource must be attached. This value specifies that a function to enumerate resource this should fail if the caller is not 
            authenticated, even if the network permits enumeration without authentication.</summary>
        </member>
        <member name="T:CodeBase.ODprintout">
            <summary>A wrapper class for PrintDocument that has additional validation and error handling.  
            Also acts like a vessel for helpful variables that are often used when printing.</summary>
        </member>
        <member name="F:CodeBase.ODprintout._printDoc">
            <summary></summary>
        </member>
        <member name="F:CodeBase.ODprintout.Situation">
            <summary>Used to determin the printiner that should be used.</summary>
        </member>
        <member name="F:CodeBase.ODprintout.TotalPages">
            <summary>If this is set to zero, then it won't show the second number in #/# pages.</summary>
        </member>
        <member name="F:CodeBase.ODprintout.AuditDescription">
            <summary>The description that is shown on the audi trails. If blank nothing will be entered.</summary>
        </member>
        <member name="F:CodeBase.ODprintout.AuditPatNum">
            <summary>Used when making audit trails.</summary>
        </member>
        <member name="F:CodeBase.ODprintout.SettingsErrorCode">
            <summary>Is set when an error occurs during loading and printing.</summary>
        </member>
        <member name="F:CodeBase.ODprintout.ErrorEx">
            <summary>Is set when an error occurs during loading and printing.</summary>
        </member>
        <member name="F:CodeBase.ODprintout.InvalidMinDefaultPageHeight">
            <summary>Rarely used.  During construction, if the printer default page height is less than this value,
            then will be considered to be invalid and will be automatically set to our usual default page size.
            After used one time, is cleared back to the default value of 0.
            This option is disabled when set to -1.</summary>
        </member>
        <member name="F:CodeBase.ODprintout.InvalidMinDefaultPageWidth">
            <summary>Rarely used.  During construction, if the printer default page width is less than this value,
            then will be considered to be invalid and will be automatically set to our usual default page size.
            After used one time, is cleared back to the default value of -1.
            This option is disabled when set to -1.</summary>
        </member>
        <member name="F:CodeBase.ODprintout.CurPrintout">
            <summary>Is set to the last instantiated ODprintout for reference purposes.</summary>
        </member>
        <member name="P:CodeBase.ODprintout.HasValidSettings">
            <summary>Returns true if printer can be validated.
            If false then SettingsErrorCode will contain more detailed information.</summary>
        </member>
        <member name="P:CodeBase.ODprintout.PrintDoc">
            <summary></summary>
        </member>
        <member name="P:CodeBase.ODprintout.DefaultPaperSize">
            <summary>Creates an empty ODPrintDocuement to get the printiners default PaperSize.
            If not printer is installed this will return a PaperSize with width of 850 and height of 1100.</summary>
        </member>
        <member name="M:CodeBase.ODprintout.#ctor(System.Drawing.Printing.PrintPageEventHandler,CodeBase.PrintSituation,System.Int64,System.String,System.Drawing.Printing.Margins,CodeBase.PrintoutOrigin,System.Drawing.Printing.PaperSize,CodeBase.PrintoutOrientation,System.Drawing.Printing.Duplex,System.Int16,System.Int32)">
            <summary>Gets a PrintDocument that has some added functionality.  All printing in Open Dental should use this method (or an ODprintout object) for printing.</summary>
            <param name="printPageEventHandler">The handler that will get invoked when printing.  This defines how to draw each page.</param>
            <param name="printSit">ODprintout does not do anything with this field. But when ValidationDelegate is invoked we will provide the information if needed.</param>
            <param name="auditPatNum">ODprintout does not do anything with this field. But when ValidationDelegate is invoked we will provide the information if needed.</param>
            <param name="auditDescription">ODprintout does not do anything with this field. But when ValidationDelegate is invoked we will provide the information if needed.</param>
            <param name="margins">When set, this will override the default margins of "new Margins(25,25,40,40)".</param>
            <param name="printoutOrigin">Defaults to printer default.  Set to AtMargin if the graphics origin starts at the page margins; AtZero if the graphics origin is at the top-left corner of the printable page.</param>
            <param name="paperSize">When set, this will override the default paperSize of "new PaperSize("default",850,1100)".</param>
            <param name="totalPages">When creating an ODprintout for print previewing, this defines the total number of pages.</param>
            <param name="printoutOrientation">Defaults to printers default value.  Otherwise specify a value for either landscape or portrait.</param>
            <param name="duplex">Typically set when performing double-sided printing.</param>
            <param name="copies">Gets or sets the number of copies of the document to print.</param>
            <param name="totalPages">ODprintout does not do anything with this field. But when ValidationDelegate is invoked we will provide the information if needed. Defaults to 1.</param>
            <param name="printOrPreviewExceptionDelegate">Any custom delegate that the calling method wants to happen when printing or previewing throws an exception.</param>
            <param name="tryPreviewDelegate">Required to be implemented if the calling method needs the ability to preview.</param>
            <param name="tryPrintOrDebugPreviewDelegate">Same as tryPreviewDelegate, but defines isPreview based on if program is in DEBUG mode.</param>
            <returns>A new ODprintout with the given args that serves as a conduit safe printing and previewing methods.</returns>
        </member>
        <member name="M:CodeBase.ODprintout.TryPrint">
            <summary>Invokes PrintDocument.Print() after validating printer settings and any custom validation specified within the ValidationDelegate.
            Returns true if successfully printed, otherwise false if there are invalid printer settings or problems with printing.
            PrintOrPreviewExceptionDelegate will get invoked with the specific exception that occurred while printing if the calling method cares to know what went wrong.</summary>
        </member>
        <member name="T:CodeBase.PrintSituation">
            <summary>Used to identify the printer to use for the given PrintSituation.</summary>
        </member>
        <member name="F:CodeBase.PrintSituation.Default">
            <summary>0- Covers any printing situation not listed separately.</summary>
        </member>
        <member name="F:CodeBase.PrintSituation.Statement">
            <summary>1</summary>
        </member>
        <member name="F:CodeBase.PrintSituation.LabelSingle">
            <summary>2</summary>
        </member>
        <member name="F:CodeBase.PrintSituation.Claim">
            <summary>3</summary>
        </member>
        <member name="F:CodeBase.PrintSituation.TPPerio">
            <summary>4- TP and perio</summary>
        </member>
        <member name="F:CodeBase.PrintSituation.Rx">
            <summary>5</summary>
        </member>
        <member name="F:CodeBase.PrintSituation.LabelSheet">
            <summary>6</summary>
        </member>
        <member name="F:CodeBase.PrintSituation.Postcard">
            <summary>7</summary>
        </member>
        <member name="F:CodeBase.PrintSituation.Appointments">
            <summary>8</summary>
        </member>
        <member name="F:CodeBase.PrintSituation.RxControlled">
            <summary>9</summary>
        </member>
        <member name="F:CodeBase.PrintSituation.Receipt">
            <summary>10</summary>
        </member>
        <member name="F:CodeBase.PrintSituation.RxMulti">
            <summary>11</summary>
        </member>
        <member name="T:CodeBase.PrintoutErrorCode">
            <summary>Used to identify specific reasons that validaiton failed during construction.
            Set to PrintoutErrorCode.Success when validation is passed.</summary>
        </member>
        <member name="F:CodeBase.PrintoutErrorCode.Success">
            <summary>0</summary>
        </member>
        <member name="F:CodeBase.PrintoutErrorCode.NoInstalledPrinter">
            <summary>1</summary>
        </member>
        <member name="F:CodeBase.PrintoutErrorCode.PrinterSettingsNotFound">
            <summary>2</summary>
        </member>
        <member name="F:CodeBase.PrintoutErrorCode.PrinterNameNotFound">
            <summary>3</summary>
        </member>
        <member name="F:CodeBase.PrintoutErrorCode.InvalidPrinterSettings">
            <summary>4</summary>
        </member>
        <member name="F:CodeBase.PrintoutErrorCode.PrinterConnectionError">
            <summary>5</summary>
        </member>
        <member name="T:CodeBase.PrintoutOrigin">
            <summary></summary>
        </member>
        <member name="F:CodeBase.PrintoutOrigin.Default">
            <summary>0 - Use printer default.</summary>
        </member>
        <member name="F:CodeBase.PrintoutOrigin.AtMargin">
            <summary>1 - Priting begins at (margin left,margin top).  Starts at the page margins.</summary>
        </member>
        <member name="F:CodeBase.PrintoutOrigin.AtZero">
            <summary>2 - Printing begins at (0,0).  Top-left corner of the printable page.</summary>
        </member>
        <member name="T:CodeBase.PrintoutOrientation">
            <summary></summary>
        </member>
        <member name="F:CodeBase.PrintoutOrientation.Default">
            <summary>0 - Use printer default.</summary>
        </member>
        <member name="F:CodeBase.PrintoutOrientation.Landscape">
            <summary>1</summary>
        </member>
        <member name="F:CodeBase.PrintoutOrientation.Portrait">
            <summary>2</summary>
        </member>
        <member name="T:CodeBase.ODTuple`2">
            <summary>This class can be used over Middle Tier in place of System.Tuple. Trying to serialize a System.Tuple for Middle Tier will cause an
            exception because it does not have a parameterless constructor.</summary>
        </member>
        <member name="T:CodeBase.ODTuple`3">
            <summary>This class can be used over Middle Tier in place of System.Tuple. Trying to serialize a System.Tuple for Middle Tier will cause an
            exception because it does not have a parameterless constructor.</summary>
        </member>
        <member name="T:CodeBase.PasswordVaultWrapper">
            <summary>This wrapper class protects Windows 7 users from a runtime error that is caused by the Windows.wnd reference. This reference only works on windows 8 and up. Any calling of 
            the member's methods MUST be try-caught to avoid a runtime error.</summary>
        </member>
        <member name="M:CodeBase.PasswordVaultWrapper.ClearCredentials(System.String)">
            <summary>Clears all OpenDental Middle Tier credentials from the PasswordVault for the currently signed in Windows User.</summary>
        </member>
        <member name="M:CodeBase.PasswordVaultWrapper.WritePassword(System.String,System.String,System.String)">
            <summary>This method will throw an exception if you pass it a blank password. Windows cannot encrypt a blank password. 
            Callers of this method should consider this scenario.  Throws exceptions.</summary>
        </member>
        <member name="M:CodeBase.PasswordVaultWrapper.TryRetrieveUserName(System.String,System.String@)">
            <summary>Retrieves the first "OpenDental Middle Tier" username listed in the Password Vault for the URI passed in.</summary>
        </member>
        <member name="M:CodeBase.PasswordVaultWrapper.RetrievePassword(System.String,System.String)">
            <summary>An exception will be thrown if the password cannot be found. Callers of this method should consider this scenario.</summary>
        </member>
        <member name="T:CodeBase.ServicesHelper">
            <summary>This is a helper class meant to be used to easily manage Windows services.</summary>
        </member>
        <member name="F:CodeBase.ServicesHelper._installUtilPath">
            <summary>[CurrentDirectory]/InstallUtil/installutil.exe</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.ExecuteProcess(System.String,System.String,System.String@,System.Int32@,System.String)">
            <summary>Executes a process and waits up to 10 seconds for the process to execute.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.Install(System.String,System.IO.FileInfo)">
            <summary>Returns true if the service was installed successfully.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.Install(System.String,System.IO.FileInfo,System.String@,System.Int32@)">
            <summary>Utilizes "installutil.exe" to install the serviceFileInfo with the corresponding serviceName passed in.
            The out parameters "standardOutput" and "exitCode" will contain the results of the "Process" execution.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.Uninstall(System.ServiceProcess.ServiceController)">
            <summary>Returns true if the service was able to uninstall successfully.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.Uninstall(System.String,System.String@,System.Int32@)">
            <summary>Utilizes "installutil.exe" to uninstall the serviceFileInfo with the corresponding serviceName passed in.
            Uses the local machines registry in order to find the corresponding service that shares the serviceName passed in.
            The out parameters "standardOutput" and "exitCode" will contain the results of the "Process" execution.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.Start(System.String,System.Boolean)">
            <summary>Returns true if the service was able to start successfully.  Set hasExceptions to true if the exception is desired instead.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.Start(System.ServiceProcess.ServiceController,System.Boolean,System.Int32)">
            <summary>Returns true if the service was able to start successfully.  Set hasExceptions to true if the exception is desired instead.
            Set timeoutSeconds to the number of seconds that the service controller should wait for the service to report 'Running'.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.StartServices(System.Collections.Generic.List{System.ServiceProcess.ServiceController},System.Boolean)">
            <summary>Starts all services passed in.
            If hasExceptions is set to false then a string will be returned indicating which services did not start.  Empty string if all started.
            If hasExceptions is set to true, there is a chance that not all services will start.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.Stop(System.String,System.Boolean)">
            <summary>Returns true if the service was able to stop successfully.  Set hasExceptions to true if the exception is desired instead.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.Stop(System.ServiceProcess.ServiceController,System.Boolean,System.Int32)">
            <summary>Returns true if the service was able to stop successfully.  Set hasExceptions to true if the exception is desired instead.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.StopServices(System.Collections.Generic.List{System.ServiceProcess.ServiceController},System.Boolean)">
            <summary>Stops all services passed in.
            If hasExceptions is set to false then a string will be returned indicating which services did not stop.  Empty string if all stopped.
            If hasExceptions is set to true, there is a chance that not all services will be stopped.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.GetServices">
            <summary>Returns a list of all services.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.GetServicesByRegistryImagePath(System.String)">
            <summary>Returns a list of all services that have a registry entry where the ImagePath is pointing to the executable name passed in.
            Computers can have mulitple services installed each named uniquely but all pointing to the same executable or different versions of the same
            executable.  Sometimes an action needs to be taken on all services that share an exe.  E.g. shutting down all eConnectors.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.GetServiceByServiceName(System.String,System.Boolean,System.Boolean)">
            <summary>Returns the service with the specified name.  Returns null if not found.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.GetAllOpenDentServices">
            <summary>Returns all services that start with "OpenDent".</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.GetServicesByExe(System.String)">
            <summary>Returns all services that their "Path to executeable" contains the passed in executable name.  Throws exceptions.</summary>
            <param name="exeName">E.g. OpenDentalCustListener.exe</param>
        </member>
        <member name="M:CodeBase.ServicesHelper.GetServiceByExeFullPath(System.String)">
            <summary>Returns one service that has "Path to executeable" set to the full path passed in.  Returns null if not found.</summary>
            <param name="exeFullPath">E.g. C:\Program Files(x86)\Open Dental\OpenDentalCustListener\OpenDentalCustListener.exe</param>
        </member>
        <member name="M:CodeBase.ServicesHelper.GetIsEveryoneAllowedToManageService(System.ServiceProcess.ServiceController)">
            <summary>Returns true if the service passed in allows "Everyone" to manage the service (start / stop).
            Throws exceptions if anything went wrong accessing the security descriptor for the service controller passed in.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.SetSecurityDescriptorToAllowEveryoneToManageServices(System.Collections.Generic.List{System.ServiceProcess.ServiceController})">
            <summary>Adds the ability for Everyone to manage the passed in services by manipulating the security descriptor.
            Tries to manipulate the security descriptor for every service passed in.  Silently fails if unable to apply the new permission.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.SetSecurityDescriptorToAllowEveryoneToManageService(System.ServiceProcess.ServiceController)">
            <summary>Adds the ability for Everyone to manage the passed in service by manipulating the security descriptor.
            Throws exceptions if anything goes wrong manipulating the security descriptor for the service passed in.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.GetSecurityDescriptorForService(System.String,System.String@,System.Int32@)">
            <summary>Uses the service controller sdshow command to get the security descriptor for the passed in serviceName.
            The out parameters "standardOutput" and "exitCode" will contain the results of the "Process" execution.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.SetSecurityDescriptorForService(System.String,System.String,System.String@,System.Int32@)">
            <summary>Uses the service controller sdset command to set the passed in serviceName to the passed in securityDescriptor.
            The out parameters "standardOutput" and "exitCode" will contain the results of the "Process" execution.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.CreateServiceConfigFile(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Creates a default ServiceConfig file at the full file path provided.
            The config contains the current connection settings in DataConnection and defaults LogLevelOfApplication to 'Error'.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.HasService(System.String,System.IO.FileInfo)">
            <summary>Returns true if a service is currently installed with the specified service name.
            Optionally pass in the file info for the desired service and this method will also return true if there is a service utilizing the same 
            executable.</summary>
        </member>
        <member name="M:CodeBase.ServicesHelper.GetProcessServiceName(System.Int32)">
            <summary>Throws exception if method cannot find a service. Gets the service name that matches the process ID we are searching for. If a valid process ID is passed in, use that. Otherwise, use the current process's ID.</summary>
        </member>
        <member name="T:CodeBase.ServicesHelper.ODWmiService">
            <summary>Helper class that offers an alternative to querying windows to find out which services are installed.
            Use this alternative when the old "search the registry" routine fails.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WinStyles">
            <summary>After the window has been created, these styles cannot be modified, except as noted.
             https://msdn.microsoft.com/en-us/library/windows/desktop/ms632600(v=vs.85).aspx </summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_BORDER">
            <summary>The window has a thin-line border.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_CAPTION">
            <summary>The window has a title bar (includes the WS_BORDER style).</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_CHILD">
            <summary>The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_CHILDWINDOW">
            <summary>Same as the WS_CHILD style.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_CLIPCHILDREN">
            <summary>Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_CLIPSIBLINGS">
            <summary>Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message,
            the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated.
            If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window,
            to draw within the client area of a neighboring child window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_DISABLED">
            <summary>The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the EnableWindow function.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_DLGFRAME">
            <summary>The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_GROUP">
            <summary>The window is the first control of a group of controls. 
            The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style. 
            The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. 
            The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_HSCROLL">
            <summary>The window has a horizontal scroll bar.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_ICONIC">
            <summary>The window is initially minimized. Same as the WS_MINIMIZE style.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_MAXIMIZE">
            <summary>The window is initially maximized.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_MAXIMIZEBOX">
            <summary>The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_MINIMIZE">
            <summary>The window is initially minimized. Same as the WS_ICONIC style.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_MINIMIZEBOX">
            <summary>The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_OVERLAPPED">
            <summary>The window is an overlapped window. An overlapped window has a title bar and a border. Same as the WS_TILED style.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_OVERLAPPEDWINDOW">
            <summary>The window is an overlapped window. Same as the WS_TILEDWINDOW style.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_POPUP">
            <summary>The windows is a pop-up window. This style cannot be used with the WS_CHILD style.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_POPUPWINDOW">
            <summary>The window is a pop-up window. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_SIZEBOX">
            <summary>The window has a sizing border. Same as the WS_THICKFRAME style.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_SYSMENU">
            <summary>The window has a window menu on its title bar. The WS_CAPTION style must also be specified.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_TABSTOP">
            <summary>The window is a control that can receive the keyboard focus when the user presses the TAB key. 
            Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function. 
            For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_THICKFRAME">
            <summary>The window has a sizing border. Same as the WS_SIZEBOX style.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_TILED">
            <summary>The window is an overlapped window. An overlapped window has a title bar and a border. Same as the WS_OVERLAPPED style.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_TILEDWINDOW">
            <summary>The window is an overlapped window. Same as the WS_OVERLAPPEDWINDOW style.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_VISIBLE">
            <summary>The window is initially visible.
            This style can be turned on and off by using the ShowWindow or SetWindowPos function.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyles.WS_VSCROLL">
            <summary>The window has a vertical scroll bar.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WinGetAncestor">
            <summary>Retrieves the handle to the ancestor of the specified window.
            https://msdn.microsoft.com/en-us/library/windows/desktop/ms633502(v=vs.85).aspx </summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetAncestor.GA_PARENT">
            <summary>Retrieves the parent window. This does not include the owner, as it does with the GetParent function.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetAncestor.GA_ROOT">
            <summary>Retrieves the root window by walking the chain of parent windows.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetAncestor.GA_ROOTOWNER">
            <summary>Retrieves the owned root window by walking the chain of parent and owner windows returned by GetParent.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WinGetLayeredWindowAttributes">
            <summary>Retrieves the opacity and transparency color key of a layered window.
            https://msdn.microsoft.com/en-us/library/windows/desktop/ms633508(v=vs.85).aspx </summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetLayeredWindowAttributes.LWA_ALPHA">
            <summary>Use pbAlpha to determine the opacity of the layered window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetLayeredWindowAttributes.LWA_COLORKEY">
            <summary>Use pcrKey as the transparency color.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WinGetNextWindow">
            <summary>Retrieves a handle to the next or previous window in the Z-Order. The next window is below the specified window; the previous window is above.
            https://msdn.microsoft.com/en-us/library/windows/desktop/ms633509(v=vs.85).aspx </summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetNextWindow.GW_HWNDNEXT">
            <summary>Returns a handle to the window below the given window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetNextWindow.GW_HWNDPREV">
            <summary>Returns a handle to the window above the given window.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WinGetSysColor">
            <summary>Retrieves the current color of the specified display element. Display elements are the parts of a window and the display that appear on the system display screen.
            https://msdn.microsoft.com/en-us/library/windows/desktop/ms724371(v=vs.85).aspx </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_3DDKSHADOW" -->
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_3DFACE">
            <summary>Face color for three-dimensional display elements and for dialog box backgrounds.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_3DHIGHLIGHT">
            <summary>Highlight color for three-dimensional display elements (for edges facing the light source.)</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_3DHILIGHT">
            <summary>Highlight color for three-dimensional display elements (for edges facing the light source.)</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_3DLIGHT">
            <summary>Light color for three-dimensional display elements (for edges facing the light source.)</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_3DSHADOW">
            <summary>Shadow color for three-dimensional display elements (for edges facing away from the light source).</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_ACTIVEBORDER">
            <summary>Active window border.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_ACTIVECAPTION">
            <summary>Active window title bar.
            Specifies the left side color in the color gradient of an active window's title bar if the gradient effect is enabled.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_APPWORKSPACE">
            <summary>Background color of multiple document interface (MDI) applications.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_BACKGROUND">
            <summary>Desktop.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_BTNFACE">
            <summary>Face color for three-dimensional display elements and for dialog box backgrounds.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_BTNHIGHLIGHT">
            <summary>Highlight color for three-dimensional display elements (for edges facing the light source.)</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_BTNHILIGHT">
            <summary>Highlight color for three-dimensional display elements (for edges facing the light source.)</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_BTNSHADOW">
            <summary>Shadow color for three-dimensional display elements (for edges facing away from the light source).</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_BTNTEXT">
            <summary>Text on push buttons.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_CAPTIONTEXT">
            <summary>Text in caption, size box, and scroll bar arrow box.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_DESKTOP">
            <summary>Desktop.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_GRADIENTACTIVECAPTION">
            <summary>Right side color in the color gradient of an active window's title bar. COLOR_ACTIVECAPTION specifies the left side color. 
            Use SPI_GETGRADIENTCAPTIONS with the SystemParametersInfo function to determine whether the gradient effect is enabled.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_GRADIENTINACTIVECAPTION">
            <summary>Right side color in the color gradient of an inactive window's title bar. COLOR_INACTIVECAPTION specifies the left side color.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_GRAYTEXT">
            <summary>Grayed (disabled) text. This color is set to 0 if the current display driver does not support a solid gray color.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_HIGHLIGHT">
            <summary>Item(s) selected in a control.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_HIGHLIGHTTEXT">
            <summary>Text of item(s) selected in a control.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_HOTLIGHT">
            <summary>Color for a hyperlink or hot-tracked item.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_INACTIVEBORDER">
            <summary>Inactive window border.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_INACTIVECAPTION">
            <summary>Inactive window caption.
            Specifies the left side color in the color gradient of an inactive window's title bar if the gradient effect is enabled.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_INACTIVECAPTIONTEXT">
            <summary>Color of text in an inactive caption.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_INFOBK">
            <summary>Background color for tooltip controls.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_INFOTEXT">
            <summary>Text color for tooltip controls.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_MENU">
            <summary>Menu background.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_MENUHILIGHT">
            <summary>The color used to highlight menu items when the menu appears as a flat menu (see SystemParametersInfo). The highlighted menu item is outlined with COLOR_HIGHLIGHT.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_MENUBAR">
            <summary>The background color for the menu bar when menus appear as flat menus (see SystemParametersInfo). However, COLOR_MENU continues to specify the background color of the menu popup.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_MENUTEXT">
            <summary>Text in menus.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_SCROLLBAR">
            <summary>Scroll bar gray area.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_WINDOW">
            <summary>Window background.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_WINDOWFRAME">
            <summary>Window frame.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetSysColor.COLOR_WINDOWTEXT">
            <summary>Text in windows.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WinGetWindow">
            <summary>Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.
            https://msdn.microsoft.com/en-us/library/windows/desktop/ms633515(v=vs.85).aspx </summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetWindow.GW_CHILD">
            <summary>The retrieved handle identifies the child window at the top of the Z order, if the specified window is a parent window; otherwise, 
            the retrieved handle is NULL. The function examines only child windows of the specified window. It does not examine descendant windows</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetWindow.GW_ENABLEDPOPUP">
            <summary>The retrieved handle identifies the enabled popup window owned by the specified window (the search uses the first such window found using GW_HWNDNEXT); 
            otherwise, if there are no enabled popup windows, the retrieved handle is that of the specified window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetWindow.GW_HWNDFIRST">
            <summary>The retrieved handle identifies the window of the same type that is highest in the Z order.
            If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a top-level window, the handle identifies a top-level window. 
            If the specified window is a child window, the handle identifies a sibling window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetWindow.GW_HWNDLAST">
            <summary>The retrieved handle identifies the window of the same type that is lowest in the Z order.
            If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a top-level window, the handle identifies a top-level window. 
            If the specified window is a child window, the handle identifies a sibling window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetWindow.GW_HWNDNEXT">
            <summary>The retrieved handle identifies the window below the specified window in the Z order.
            If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a top-level window, the handle identifies a top-level window. 
            If the specified window is a child window, the handle identifies a sibling window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetWindow.GW_HWNDPREV">
            <summary>The retrieved handle identifies the window above the specified window in the Z order.
            If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a top-level window, the handle identifies a top-level window.
            If the specified window is a child window, the handle identifies a sibling window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetWindow.GW_OWNER">
            <summary>The retrieved handle identifies the specified window's owner window, if any. For more information, see Owned Windows.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WinMessages">
            <summary>Constants for specific windows messages 
            https://msdn.microsoft.com/en-us/library/windows/desktop/ff468921(v=vs.85).aspx </summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinMessages.MN_GETHMENU">
            <summary>Retrieves the menu handle for the current window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinMessages.WM_ERASEBKGND">
            <summary>Sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinMessages.WM_GETFONT">
            <summary>Retrieves the font with which the control is currently drawing its text.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinMessages.WM_GETTEXT">
            <summary>Copies the text that corresponds to a window into a buffer provided by the caller.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinMessages.WM_GETTEXTLENGTH">
            <summary>Determines the length, in characters, of the text associated with a window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinMessages.WM_SETFONT">
            <summary>Sets the font that a control is to use when drawing text.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinMessages.WM_SETICON">
            <summary>Associates a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinMessages.WM_SETTEXT">
            <summary>Sets the text of a window.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WinNotifications">
            <summary>Constants for specific windows notifications
            https://msdn.microsoft.com/en-us/library/windows/desktop/ff468922(v=vs.85).aspx </summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_ACTIVATEAPP">
            <summary>Sent when a window belonging to a different application than the active window is about to be activated. 
            The message is sent to the application whose window is being activated and to the application whose window is being deactivated.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_CANCELMODE">
            <summary>Sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. 
            Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. 
            For example, the EnableWindow function sends this message when disabling the specified window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_CHILDACTIVATE">
            <summary>Sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_CLOSE">
            <summary>Sent as a signal that a window or an application should terminate.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_COMPACTING">
            <summary>Sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. 
            This indicates that system memory is low.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_CREATE">
            <summary>Sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) 
            The window procedure of the new window receives this message after the window is created, but before the window becomes visible.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_DESTROY">
            <summary>Sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen.
            This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, 
            it can be assumed that all child windows still exist.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_ENABLE">
            <summary>Sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. 
            This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_ENTERSIZEMOVE">
            <summary>Sent one time to a window after it enters the moving or sizing modal loop. 
            The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function 
            and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_EXITSIZEMOVE">
            <summary>Sent one time to a window, after it has exited the moving or sizing modal loop. 
            The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function 
            and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_GETICON">
            <summary>Sent to a window to retrieve a handle to the large or small icon associated with a window. 
            The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_GETMINMAXINFO">
            <summary>Sent to a window when the size or position of the window is about to change. 
            An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_INPUTLANGCHANGE">
            <summary>Sent to the topmost affected window after an application's input language has been changed. 
            You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. 
            These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_INPUTLANGCHANGEREQUEST">
            <summary>Posted to the window with the focus when the user chooses a new input language,
            either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. 
            An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_MOVE">
            <summary>Sent after a window has been moved.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_MOVING">
            <summary>Sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_NCACTIVATE">
            <summary>Sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_NCCALCSIZE">
            <summary>Sent when the size and position of a window's client area must be calculated. 
            By processing this message, an application can control the content of the window's client area when the size or position of the window changes.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_NCCREATE">
            <summary>Sent prior to the WM_CREATE message when a window is first created.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_NCDESTROY">
            <summary>Notifies a window that its nonclient area is being destroyed. 
            The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message.WM_DESTROY is used to free the allocated memory object associated with the window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_NULL">
            <summary>Performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_QUERYDRAGICON">
            <summary>Sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. 
            An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_QUERYOPEN">
            <summary>Sent to an icon when the user requests that the window be restored to its previous size and position.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_QUIT">
            <summary>Indicates a request to terminate an application, and is generated when the application calls the PostQuitMessage function. This message causes the GetMessage function to return zero.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_SHOWWINDOW">
            <summary>Sent to a window when the window is about to be hidden or shown.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_SIZE">
            <summary>Sent to a window after its size has changed.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_SIZING">
            <summary>Sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_STYLECHANGED">
            <summary>Sent to a window after the SetWindowLong function has changed one or more of the window's styles.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_STYLECHANGING">
            <summary>Sent to a window when the SetWindowLong function is about to change one or more of the window's styles.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_THEMECHANGED">
            <summary>Broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, 
            the deactivation of a theme, or a transition from one theme to another.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_USERCHANGED">
            <summary>Sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. 
            The system sends this message immediately after updating the settings.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_WINDOWPOSCHANGED">
            <summary>Sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNotifications.WM_WINDOWPOSCHANGING">
            <summary>Sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WinGetIcon">
            <summary>The type of icon being retrieved. This parameter can be one of the following values.
            https://msdn.microsoft.com/en-us/library/windows/desktop/ms632625(v=vs.85).aspx </summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetIcon.ICON_BIG">
            <summary>Retrieve the large icon for the window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetIcon.ICON_SMALL">
            <summary>Retrieve the small icon for the window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinGetIcon.ICON_SMALL2">
            <summary>Retrieves the small icon provided by the application. If the application does not provide one, the system uses the system-generated icon for that window.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinInputLangChangeRequest.INPUTLANGCHANGE_BACKWARD">
            <summary>A hot key was used to choose the previous input locale in the installed list of input locales. This flag cannot be used with the INPUTLANGCHANGE_FORWARD flag.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinInputLangChangeRequest.INPUTLANGCHANGE_FORWARD">
            <summary>A hot key was used to choose the next input locale in the installed list of input locales. This flag cannot be used with the INPUTLANGCHANGE_BACKWARD flag.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinInputLangChangeRequest.INPUTLANGCHANGE_SYSCHARSET">
            <summary>The new input locale's keyboard layout can be used with the system character set.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNCCalcSize.WVR_ALIGNTOP">
            <summary>Specifies that the client area of the window is to be preserved and aligned with the top of the new position of the window. 
            For example, to align the client area to the upper-left corner, return the WVR_ALIGNTOP and WVR_ALIGNLEFT values.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNCCalcSize.WVR_ALIGNRIGHT">
            <summary>Specifies that the client area of the window is to be preserved and aligned with the right side of the new position of the window. 
            For example, to align the client area to the lower-right corner, return the WVR_ALIGNRIGHT and WVR_ALIGNBOTTOM values.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNCCalcSize.WVR_ALIGNLEFT">
            <summary>Specifies that the client area of the window is to be preserved and aligned with the left side of the new position of the window. 
            For example, to align the client area to the lower-left corner, return the WVR_ALIGNLEFT and WVR_ALIGNBOTTOM values.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNCCalcSize.WVR_ALIGNBOTTOM">
            <summary>Specifies that the client area of the window is to be preserved and aligned with the bottom of the new position of the window. 
            For example, to align the client area to the top-left corner, return the WVR_ALIGNTOP and WVR_ALIGNLEFT values.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNCCalcSize.WVR_HREDRAW">
            <summary>Used in combination with any other values, except WVR_VALIDRECTS, causes the window to be completely redrawn if the client rectangle changes size horizontally. 
            This value is similar to CS_HREDRAW class style</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNCCalcSize.WVR_VREDRAW">
            <summary>Used in combination with any other values, except WVR_VALIDRECTS, causes the window to be completely redrawn if the client rectangle changes size vertically. 
            This value is similar to CS_VREDRAW class style</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNCCalcSize.WVR_REDRAW">
            <summary>This value causes the entire window to be redrawn. It is a combination of WVR_HREDRAW and WVR_VREDRAW values.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinNCCalcSize.WVR_VALIDRECTS">
            <summary>This value indicates that, upon return from WM_NCCALCSIZE, the rectangles specified by the rgrc[1] and rgrc[2] members of the NCCALCSIZE_PARAMS structure 
            contain valid destination and source area rectangles, respectively. The system combines these rectangles to calculate the area of the window to be preserved. 
            The system copies any part of the window image that is within the source rectangle and clips the image to the destination rectangle. 
            Both rectangles are in parent-relative or screen-relative coordinates. This flag cannot be combined with any other flags.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WinShowWindow">
            <summary>The status of the window being shown. If lParam is zero, the message was sent because of a call to the ShowWindow function; otherwise, lParam is one of the following values.
            https://msdn.microsoft.com/en-us/library/windows/desktop/ms632645(v=vs.85).aspx </summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinShowWindow.SW_OTHERUNZOOM">
            <summary>The window is being uncovered because a maximize window was restored or minimized.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinShowWindow.SW_OTHERZOOM">
            <summary>The window is being covered by another window that has been maximized.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinShowWindow.SW_PARENTCLOSING">
            <summary>The window's owner window is being minimized.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinShowWindow.SW_PARENTOPENING">
            <summary>The window's owner window is being restored.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WinSize">
            <summary>The type of resizing requested. This parameter can be one of the following values.
            https://msdn.microsoft.com/en-us/library/windows/desktop/ms632646(v=vs.85).aspx </summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinSize.SIZE_MAXHIDE">
            <summary>Message is sent to all pop-up windows when some other window is maximized.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinSize.SIZE_MAXIMIZED">
            <summary>The window has been maximized.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinSize.SIZE_MAXSHOW">
            <summary>Message is sent to all pop-up windows when some other window has been restored to its former size.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinSize.SIZE_MINIMIZED">
            <summary>The window has been minimized.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinSize.SIZE_RESTORED">
            <summary>The window has been resized, but neither the SIZE_MINIMIZED nor SIZE_MAXIMIZED value applies.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WinSizing">
            <summary>The edge of the window that is being sized. This parameter can be one of the following values.
            https://msdn.microsoft.com/en-us/library/windows/desktop/ms632647(v=vs.85).aspx </summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinSizing.WMSZ_BOTTOM">
            <summary>Bottom edge</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinSizing.WMSZ_BOTTOMLEFT">
            <summary>Bottom-left corner</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinSizing.WMSZ_BOTTOMRIGHT">
            <summary>Bottom-right corner</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinSizing.WMSZ_LEFT">
            <summary>Left edge</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinSizing.WMSZ_RIGHT">
            <summary>Right edge</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinSizing.WMSZ_TOP">
            <summary>Top edge</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinSizing.WMSZ_TOPLEFT">
            <summary>Top-left corner</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinSizing.WMSZ_TOPRIGHT">
            <summary>Top-right corner</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyleChange.GWL_EXSTYLE">
            <summary>The extended window styles have changed.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinStyleChange.GWL_STYLE">
            <summary>The window styles have changed.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinTitleBarInfo.STATE_SYSTEM_FOCUSABLE">
            <summary>The element can accept the focus.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinTitleBarInfo.STATE_SYSTEM_INVISIBLE">
            <summary>The element is invisible.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinTitleBarInfo.STATE_SYSTEM_OFFSCREEN">
            <summary>The element has no visible representation.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinTitleBarInfo.STATE_SYSTEM_UNAVAILABLE">
            <summary>The element is unavailable.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.WinTitleBarInfo.STATE_SYSTEM_PRESSED">
            <summary>The element is in the pressed state.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.CHANGEFILTERSTRUCT">
            <summary>Contains status information for the application-switching (ALT+TAB) window.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.CLIENTCREATESTRUCT">
            <summary>Contains information about the menu and first multiple-document interface (MDI) child window of an MDI client window. 
            An application passes a pointer to this structure as the lpParam parameter of the CreateWindow function when creating an MDI client window.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.CREATESTRUCT">
            <summary>Defines the initialization parameters passed to the window procedure of an application. These members are identical to the parameters of the CreateWindowEx function.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.GUITHREADINFO">
            <summary>Contains information about a GUI thread.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.MINMAXINFO">
            <summary>Contains information about a window's maximized size and position and its minimum and maximum tracking size.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.NCCALCSIZE_PARAMS">
            <summary>Contains information that an application can use while processing the WM_NCCALCSIZE message to calculate the size, position, and valid contents of the client area of a window.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.STYLESTRUCT">
            <summary>Contains the styles for a window.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.TITLEBARINFO">
            <summary>Contains title bar information.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.TITLEBARINFOEX">
            <summary>Expands on the information described in the TITLEBARINFO structure by including the coordinates of each element of the title bar.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.UPDATELAYEREDWINDOWINFO">
            <summary>Used by UpdateLayeredWindowIndirect to provide position, size, shape, content, and translucency information for a layered window.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WINDOWINFO">
            <summary>Contains window information.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WINDOWPLACEMENT">
            <summary>Contains information about the placement of a window on the screen.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WINDOWPOS">
            <summary>Contains status information for the application-switching (ALT+TAB) window.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.PaintMessages">
            <summary>The following messages are used with painting and drawing
            https://msdn.microsoft.com/en-us/library/dd162761(v=vs.85).aspx </summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.PaintMessages.WM_DISPLAYCHANGE">
            <summary>Retrieves the parent window. This does not include the owner, as it does with the GetParent function.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.PaintMessages.WM_SETREDRAW">
            <summary>Retrieves the root window by walking the chain of parent windows.</summary>
        </member>
        <member name="F:CodeBase.WindowsApiWrapper.PaintMessages.GA_ROOTOWNER">
            <summary>Retrieves the owned root window by walking the chain of parent and owner windows returned by GetParent.</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.EM_Rich">
            <summary>http://docs.embarcadero.com/products/rad_studio/delphiAndcpp2009/HelpUpdate2/EN/html/delphivclwin32/Messages.html</summary>
        </member>
        <member name="T:CodeBase.WindowsApiWrapper.WinMessagesOther">
            <summary>http://docs.embarcadero.com/products/rad_studio/delphiAndcpp2009/HelpUpdate2/EN/html/delphivclwin32/Messages.html</summary>
        </member>
        <member name="T:CodeBase.ODPrimitiveExtensions">
            <summary>Extension methods are extremely rare in OD.  Jordan must approve any new ones.</summary>
        </member>
        <member name="M:CodeBase.ODPrimitiveExtensions.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>Returns a string array that contains the substrings in this string that are delimited by the specified string.</summary>
            <param name="separator">A string that delimits the substrings in this string.</param>
            <param name="options">StringSplitOptions.RemoveEmptyEntries to omit empty array elements from the array returned; or StringSplitOptions.None to include empty array elements in the array returned.</param>
        </member>
        <member name="M:CodeBase.ODPrimitiveExtensions.IsNullOrEmpty``1(System.Collections.Generic.List{``0})">
            <summary>Returns true if the List is null or the count is 0.</summary>
        </member>
        <member name="M:CodeBase.ODPrimitiveExtensions.IsNullOrEmpty(System.Array)">
            <summary>Returns true if the Array is null or the length is 0.</summary>
        </member>
        <member name="M:CodeBase.ODPrimitiveExtensions.IsNullOrEmpty(System.String)">
            <summary>Returns true if the string is null or empty.</summary>
        </member>
        <member name="M:CodeBase.ODPrimitiveExtensions.GetDescription(System.Enum,System.Boolean)">
            <summary>Returns the Description attribute, if available. If not, returns enum.ToString().  Pass it through translation after retrieving from here.</summary>
        </member>
        <member name="M:CodeBase.ODPrimitiveExtensions.In``1(``0,``0[])">
            <summary>Use like this: if(!x.In(2,3,61,71)). This lets you avoid making a list. If you already have a list, then just use the linq Contains method.</summary>
        </member>
        <member name="M:CodeBase.DateTools.AddWeekDays(System.DateTime,System.Int32)">
            <summary>Adds x number of week days to the given DateTime. This assumes Saturday and Sunday are the weekend days.</summary>
        </member>
        <member name="M:CodeBase.DateTools.IsOlderThan(System.DateTime,System.TimeSpan)">
            <summary>Returns true if the difference between now and the given datetime is greater than the timeSpan.</summary>
        </member>
        <member name="M:CodeBase.DateTools.IsNewerThan(System.DateTime,System.TimeSpan)">
            <summary>Returns true if the difference between now and the given datetime is less than the timeSpan.</summary>
        </member>
        <member name="M:CodeBase.StringTools.Truncate(System.String,System.Int32,System.Boolean)">
            <summary>Removes end of string to limit it to a specified number of characters.  Optional ... elipsis.  Handles null, etc.</summary>
        </member>
        <member name="M:CodeBase.StringTools.TruncateBeginning(System.String,System.Int32)">
            <summary>Removes characters from the beginning of a string, up to maxCharacters.</summary>
        </member>
        <member name="M:CodeBase.StringTools.ToUpperFirstOnly(System.String)">
            <summary>Convert the first char in the string to upper case. The rest of the string will be lower case.</summary>
        </member>
        <member name="M:CodeBase.StringTools.StripNonDigits(System.String)">
            <summary>Removes all characters from the string that are not digits.</summary>
        </member>
        <member name="M:CodeBase.StringTools.StripSpecialChars(System.String)">
            <summary>Removes all characters from the string that are not letters or digits.</summary>
        </member>
        <member name="M:CodeBase.StringTools.AppendLine(System.String,System.String)">
            <summary>Adds a new line if the string is not empty and appends the addition.</summary>
        </member>
        <member name="M:CodeBase.StringTools.SubstringBefore(System.String,System.String)">
            <summary>Returns everything in the string after the "beforeThis" string. Throws exception if "beforeThis" is not present in the string.</summary>
            <exception cref="T:System.IndexOutOfRangeException" />
        </member>
        <member name="M:CodeBase.StringTools.SubstringBefore(System.String,System.Char,System.Int32)">
            <summary>Returns everything in the value string before the targetCount number of target string.
            TargetCount is 1 based.
            Returns empty string if not found or if targetCount is greater then the number of occurances of target in value.</summary>
        </member>
        <member name="M:CodeBase.StringTools.SubstringAfter(System.String,System.String,System.Boolean)">
            <summary>Returns everything in the string after the "afterThis" string. Throws exception if "afterThis" is not present in the string.</summary>
        </member>
        <member name="M:CodeBase.StringTools.RegReplace(System.Text.StringBuilder,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>Use regular expressions to do an in-situ string replacement. Default behavior is case insensitive.</summary>
             <param name="pattern">Must be a REGEX compatible pattern.</param>
             <param name="replacement">The string that should be used to replace each occurance of the pattern.</param>
             <param name="regexOptions">IgnoreCase by default, allows others.</param>
        </member>
        <member name="M:CodeBase.StringTools.MaskEmail(System.String)">
            <summary>Returns the given email masked. If there is an error with this email, will return blank.</summary>
        </member>
        <member name="M:CodeBase.StringTools.MaskPhoneNumber(System.String)">
            <summary>Returns the given phone number masked. If there is an error with this phone number, will return blank.</summary>
        </member>
        <member name="M:CodeBase.CompareDecimal.IsZero(System.Decimal)">
            <summary>Used to check if a decimal number is "equal" to zero based on some epsilon. Epsilon is 0.0000001M and will return true if the absolute value of the decimal is less than that.</summary>
        </member>
        <member name="M:CodeBase.CompareDecimal.IsLessThanZero(System.Decimal)">
            <summary>Used to check if a decimal number is "less than" zero based on some epsilon.</summary>
        </member>
        <member name="M:CodeBase.CompareDecimal.IsLessThanOrEqualToZero(System.Decimal)">
            <summary>Used to check if a decimal number is "less than" zero based on some epsilon.</summary>
        </member>
        <member name="M:CodeBase.CompareDecimal.IsGreaterThanOrEqualToZero(System.Double)">
            <summary>Used to check if a double number is "greater than" zero based on some epsilon.</summary>
        </member>
        <member name="M:CodeBase.CompareDecimal.IsGreaterThanOrEqualToZero(System.Decimal)">
            <summary>Used to check if a decimal number is "greater than" zero based on some epsilon.</summary>
        </member>
        <member name="M:CodeBase.CompareDecimal.IsGreaterThan(System.Decimal,System.Decimal)">
            <summary>Used to check if a decimal is "greater than" another decimal based on some epsilon.</summary>
        </member>
        <member name="M:CodeBase.CompareDecimal.IsGreaterThanZero(System.Decimal)">
            <summary>Used to check if a decimal number is "greater than" zero based on some epsilon.</summary>
        </member>
        <member name="M:CodeBase.CompareDecimal.IsGreaterThanZero(System.Double)">
            <summary>Used to check if a double number is "greater than" zero based on some epsilon.</summary>
        </member>
        <member name="M:CodeBase.CompareDouble.IsZero(System.Double)">
            <summary>Used to check if a floating point number is "equal" to zero based on some epsilon.  Epsilon is 0.0000001f and will return true if the absolute value of the double is less than that.</summary>
        </member>
        <member name="M:CodeBase.CompareDouble.IsLessThan(System.Double,System.Double)">
            <summary>Used to check if a double is "less than" another double based on some epsilon.</summary>
        </member>
        <member name="M:CodeBase.CompareDouble.IsGreaterThan(System.Double,System.Double)">
            <summary>Used to check if a double is "greater than" another double based on some epsilon.</summary>
        </member>
        <member name="M:CodeBase.CompareDouble.IsLessThanZero(System.Double)">
            <summary>Used to check if a double number is "less than" zero based on some epsilon.</summary>
        </member>
        <member name="M:CodeBase.CompareDouble.IsLessThanOrEqualToZero(System.Double)">
            <summary>Used to check if a double number is "less than" zero based on some epsilon.</summary>
        </member>
        <member name="M:CodeBase.CompareFloat.IsZero(System.Single)">
            <summary>Used to check if a floating point number is "equal" to zero based on some epsilon. Epsilon is 0.0000001f and will return true if the absolute value of the double is less than that.</summary>
        </member>
        <member name="M:CodeBase.CompareFloat.HasPartialCent(System.Single)">
            <summary>Returns true if the number contains a partial cent. E.g.: "0.035" returns true, "0.03" returns false.</summary>
        </member>
        <member name="M:CodeBase.EnumTools.GetAttributeOrDefault``1(System.Enum)">
            <summary>Returns the attribute for the enum value if available. If not, returns the default value for the attribute.</summary>
        </member>
        <member name="M:CodeBase.EnumTools.HasAnyFlag(System.Enum,System.Enum[])">
            <summary>Returns true if the enum value matches any of the flags passed in.</summary>
        </member>
        <member name="M:CodeBase.EnumTools.AddFlag``1(System.Enum,``0[])">
            <summary>Returns the enum value with the passed in flags added.</summary>
        </member>
        <member name="M:CodeBase.EnumTools.RemoveFlag``1(System.Enum,``0[])">
            <summary>Returns the enum value with the passed in flags removed.</summary>
        </member>
        <member name="M:CodeBase.EnumTools.GetFlags``1(``0)">
            <summary>Returns a list of flags that this enum value has.  Ignores 0b0 flag if defined.</summary>
        </member>
        <member name="M:CodeBase.GenericTools.DeepCopy``2(``0)">
            <summary>Deep copy of the source item to a new instance of the target return type.</summary>
        </member>
        <member name="M:CodeBase.GenericTools.DeepClone(System.Object,System.Type)">
            <summary>Clone the object Properties and its children recursively</summary>
        </member>
        <member name="M:CodeBase.GenericTools.IsODHQ``1(``0)">
            <summary>The IsODHQAttribute can  be applied to a field, and checked. Returns true if the class or field is marked ODHQ only.</summary>
        </member>
        <member name="M:CodeBase.ListTools.FromSingle``1(``0)">
            <summary>Converts a single item to a List containing one item.</summary>
        </member>
        <member name="M:CodeBase.ListTools.CompareList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>Compares 2 lists. Returns true if size and items are exactly the same in each list. Throws if all list items match, otherwise returns silently.</summary>
        </member>
        <member name="M:CodeBase.ListTools.DeepCopy``2(System.Collections.Generic.List{``0})">
            <summary>Deep copy each list items of the source list to a new list instance of the target return type.</summary>
        </member>
        <member name="M:CodeBase.ListTools.In``1(``0,``0[])">
            <summary>This is being eliminated. Use the extension method instead (up on line 65).</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CodeBase.ListTools.In``1(``0,System.Collections.Generic.IEnumerable{``0})" -->
        <member name="M:CodeBase.ListTools.TryCompareList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>Compares 2 lists. Returns true if size and items are exactly the same in each list. Uses .Equals() of the given TSource type to compare so beware if comparing anything but primitives.  Returns true if lists are the same, otherwise returns false.
            <see cref="!:http://stackoverflow.com/a/5620298"/></summary>
            <typeparam name="TSource">The type being compared. Will use .Equals() to compare.</typeparam>
        </member>
        <member name="T:CodeBase.ListTools.ODEqualityComparer`1">
            <summary>Allows for custom comparison of TSource. Implements IEqualityComparer, which is required by LINQ for inline comparisons.</summary>
        </member>
        <member name="T:CodeBase.ShortDescriptionAttribute">
            <summary>Microsoft has a built-in Description attribute in the System.ComponentModel namespace.  This supplements it.</summary>
        </member>
        <member name="T:CodeBase.IsODHQAttribute">
            <summary>The IsODHQAttribute can  be applied to a field, and checked. Use in tandem with PrefC.IsODHQ to hide HQ only features.</summary>
        </member>
        <member name="M:CodeBase.IsODHQAttribute.#ctor">
            <summary></summary>
        </member>
        <member name="P:CodeBase.IsODHQAttribute.IsODHQ">
            <summary>The class or field is only used at OD HQ. Defaults to false.</summary>
        </member>
        <member name="F:CodeBase.MiscUtils._arrayShortDataSizes">
            <summary>The short descriptions for data sizes.  E.g. B, KB, MB, etc.
            The largest value of long is 9,223,372,036,854,775,808 which is only ~8 exabytes so including zettabytes and yottabytes seems like overkill.
            Also, the largest value of ulong would be 18,446,744,073,709,551,615 which is only ~16 exabytes.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.IsValidHttpUri(System.String)">
            <summary>Indicates if the given uri is valid and of the scheme http(s).</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.GetRandomDate(System.DateTime,System.DateTime)">
            <summary>Returns a date that is on or after lowerBound and before upperBound</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.GetDatesInRange(System.DateTime,System.DateTime)">
            <summary>Includes the start and end dates. Returns an empty list if the start and end is MinValue.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.DisplayBytes(System.Int64)">
            <summary>Displays the bytes passed in into a human readable string. E.g. KB, MB, GB, etc.
            This method treats 1024 bytes as a single KB instead of 1000 bytes as a single KB.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.CutStringIntoSimilarSizedChunks(System.String,System.Int32)">
            <summary>Converts string into a list of strings where each string in the list is smaller than or equal to the
            specified size, in Bytes. Always treats the inputString as UTF8 encoded.</summary>
            <param name="inputString">String to split into chunks</param>
            <param name="chunkSize">Maximum number of Bytes each string in the list may be</param>
            <returns></returns>
        </member>
        <member name="M:CodeBase.MiscUtils.GetCultureFromThreeLetter(System.String)">
            <summary>Accepts a 3 character string which represents a neutral culture (for example, "eng" for English) in the ISO639-2 format.  Returns null if the three letter ISO639-2 name is not standard (useful for determining custom languages).</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.Between``1(``0,``0,``0,System.Boolean,System.Boolean)">
            <summary>Extension for BETWEEN statement.  Use like this: if(x.Between(0,9)).  By default, it includes both upper and lower bound in test.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Filters the current IEnumerable of objects based on the func provided.
            C# does not provide a way to do listObj.Distinct(x => x.Field).  This extension allows us to do listObj.DistinctBy(x => x.Field)</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>Deprecated. Use a for i loop. Loops through the IEnumerable and performs the action on each item.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.DoSlotsOverlap(System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>Returns true if the two time slots overlap in time. Slot1 and Slot2 are interchangeable.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.GetExceptionText(System.Exception,System.String,System.Boolean)">
            <summary>Returns exception string that includes the threadName if provided and exception type and up to 5 inner exceptions.
            Used for both bugSubmissions and the MsgBoxCopyPaste shown to customers when a UE occurs.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.InnerExceptionToString(System.Exception,System.Int32)">
            <summary>Formats the inner exception (and all its inner exceptions) as a readable string. Okay to pass in an exception with no inner 
            exception.</summary>
            <param name="depth">The recursive depth of the current method call.</param>
        </member>
        <member name="M:CodeBase.MiscUtils.GetInnermostException(System.Exception,System.Int32)">
            <summary>Gets the innermost InnerException that is not null. Recursive.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.GetExceptionContainingMessage(System.Exception,System.String,System.Int32)">
            <summary>Returns the exception or inner exception that contains the given message. Returns null otherwise.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.PreserveExceptionInfoAndThrow(System.Exception)">
            <summary>Attempts to throw the given exception, preserving the original stack trace.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.GetOrdinalIndicator(System.String)">
            <summary>Gets the ordinal indicator e.g.passing in 13 will return "th". Translations should be done in the calling class and 
            should include the number in the translation. This is because different languages have different ordinal rules for each number.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.GetOrdinalIndicator(System.Int32)">
            <summary>Gets the ordinal indicator e.g.passing in 13 will return "th". Translations should be done in the calling class and 
            should include the number in the translation. This is because different languages have different ordinal rules for each number.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.GetMostRecentDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>Gets the most recent date in the past (or today) that is the specified day of week.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.GetUpcomingDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>Gets the soonest upcoming date in the future (or today) that is the specified day of week.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.DebugLogInterval(System.String)">
            <summary>Not used yet.  This causes a time to be set at an event, like clicking the Appt module.  
            At the next interesting event, it's used for comparison, then set again. 
            The result that gets sent to debug output window is a series of intervals, so that we can notice the longest intervals.  
            The location names that are passed in are the name of what just happened, so that the names match up with the intervals.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.Encrypt(System.String)">
            <summary>Encrypts signature text and returns a base 64 string so that it can go directly into the database.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.TryUpdateIeEmulation">
            <summary>Finds installed IE version for this workstation and attempts to modify registry to force browser emualtion to this version.
            Typically used in conjunction with WebBrowser control to ensure that the WebBrowser is running in the latest available emulation mode.
            Returns true if the emulation version was previously wrong but was successfully updated. Otherwise returns false.
            If true is returned than this application will need to be restarted in order for the changes to take effect.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.GetCurrentExeFileName">
            <summary>Returns the file name with the extension of the currently executing program.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.GetVersionFromString(System.String)">
            <summary>Returns a string representation of a version in the format 'x.x.x.x'. Most likely the string passed in should be in the correct format.
            Sometimes the passed string will have letters after the build number. This will strip letters.</summary>
        </member>
        <member name="M:CodeBase.MiscUtils.CleanVersionNumber(System.String)">
            <summary>This helper method does the stripping of any alpha characters.</summary>
        </member>
        <member name="T:CodeBase.ActionNode">
            <summary>This class is used to create a tree of actions who depend on each other.
            If action x depends on action y, then action x will be a leaf of action y.
            When StartNodeAction() is called, the node action is completed, then each leaf action is added to the thread pool.
            This is faster than creating a new thread for each action because of the overhead when starting a large amount of threads.
            This class is best used for a longer list of actions that are dependent on one another that can be described by a tree graph.
            </summary>
        </member>
        <member name="M:CodeBase.ActionNode.#ctor">
            <summary>Creates an action node with an empty action and no children.  Good for use as a root.</summary>
        </member>
        <member name="M:CodeBase.ActionNode.#ctor(System.Action)">
            <summary>Creates an action node with no children and the passed in action.</summary>
        </member>
        <member name="M:CodeBase.ActionNode.#ctor(System.Action,System.Collections.Generic.List{CodeBase.ActionNode})">
            <summary>Creates an action node with children via the parameters passed in.</summary>
        </member>
        <member name="M:CodeBase.ActionNode.StartNodeAction">
            <summary>Synchronously invokes _actionParent on the main thread then asynchronously invokes all _listChildActionNodes (run in parallel)
            and then waits until all children and their children's children (utilizing recursion) have finished executing.</summary>
        </member>
        <member name="T:CodeBase.ODRandom">
            <summary>System.Random is not thread-safe. 
            This class syncronizes a single instance of System.Random and performs a lock anytime it is accessed, which makes it thread-safe.</summary>
        </member>
        <member name="M:CodeBase.ODRandom.Next(System.Int32,System.Int32)">
            <summary>Returns a random integer that is within a specified range. minValue is inclusive, maxValue is exclusive. System.Random is not 
            thread-safe. This method makes it thread-safe.</summary>
        </member>
        <member name="M:CodeBase.ODRandom.Next">
            <summary>Returns a nonnegative random integer. System.Random is not thread-safe. This method makes it thread-safe.</summary>
        </member>
        <member name="M:CodeBase.ODRandom.Next(System.Int32)">
            <summary>Returns a nonnegative random integer that is less than the specified maximum. System.Random is not thread-safe. This method makes 
            it thread-safe.</summary>
        </member>
        <member name="M:CodeBase.ODRandom.NextBytes(System.Byte[])">
            <summary>Fills the elements of a specified array of bytes with random numbers. System.Random is not thread-safe. This method makes it 
            thread-safe.</summary>
        </member>
        <member name="M:CodeBase.ODRandom.NextDouble">
            <summary>Returns a random floating-point number between 0.0 and 1.0. System.Random is not thread-safe. This method makes it thread-safe.
            </summary>
        </member>
        <member name="F:CodeBase.ODEnvironment.SM_CONVERTIBLESLATEMODE">
            <summary>Reflects the state of the laptop or slate mode, 0 for Slate Mode and non-zero otherwise.
            When this system metric changes, the system sends a broadcast message via WM_SETTINGCHANGE with "ConvertibleSlateMode" in the LPARAM.
            Note that this system metric doesn't apply to desktop PCs. In that case, use GetAutoRotationState.
            See https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getsystemmetrics for details.
            Not supported in Windows CE.</summary>
        </member>
        <member name="F:CodeBase.ODEnvironment.SM_TABLETPC">
            <summary>Nonzero if the current operating system is the Windows XP Tablet PC edition or if the current operating system is Windows Vista or Windows 7
            and the Tablet PC Input service is started; otherwise, 0. The SM_DIGITIZER setting indicates the type of digitizer input supported by a device 
            running Windows 7 or Windows Server 2008 R2. For more information, see Remarks.
            See https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getsystemmetrics for details.
            Not supported in Windows CE.</summary>
        </member>
        <member name="F:CodeBase.ODEnvironment.UNKNOWN_NAME">
            <summary>This is what MachineName will return if ODBuild.IsWeb and the ODCloudClient isn't running or there's an error trying to retrieve the local computer name.</summary>
        </member>
        <member name="F:CodeBase.ODEnvironment._machineName">
            <summary>The name of the computer the client is running on.  Start the name out as "UNKNOWN".  Gets set by the ODCloudMachineName thread if the cloud client is running.</summary>
        </member>
        <member name="P:CodeBase.ODEnvironment.IsTabletMode">
            <summary>Indicates if the current device is running in Windows Tablet mode and does not have a physical keyboard attached.
            Returns false if any errors occurred while trying to query system metrics for information so that calling entities default to Desktop mode.</summary>
        </member>
        <member name="P:CodeBase.ODEnvironment.IsTabletPC">
            <summary>Indicates if the current device is a Windows Tablet PC. This means that all of the following are true:
            There is an integrated digitizer, either pen or touch, on the system. The Tablet PC optional component is installed. This component contains 
            features such as Tablet PC Input Panel and Windows Journal. The computer is licensed to use the optional component. Premium versions of 
            Windows Vista—such as Windows Vista Home Premium, Windows Vista Small Business, Windows Vista Professional, Windows Vista Enterprise, and 
            Windows Vista Ultimate—are licensed to use the optional component. Tablet PC Input Service is running. Tablet PC Input Service is a new 
            service for Windows Vista that controls Tablet PC input.
            See https://docs.microsoft.com/en-us/windows/desktop/tablet/determining-whether-a-pc-is-a-tablet-pc for details.</summary>
        </member>
        <member name="P:CodeBase.ODEnvironment.IsCloudServer">
            <summary>Indicates if we are running on an OD Cloud server.</summary>
        </member>
        <member name="M:CodeBase.ODEnvironment.QueryTabletMode">
            <summary>True if the current device is both a Tablet PC and is also in slate mode, the combination of which we will consider to mean the
            device is currently running in Tablet Mode.  SM_CONVERTIBLESLATEMODE reflects the state of the laptop or slate mode, 0 for Slate Mode and 
            non-zero otherwise. Note that the SM_CONVERTIBLESLATEMODE system metric doesn't apply to desktop PCs, and as such is only useful for 
            determining if a device is a Tablet PC and functioning as such in conjunction with SM_TABLETPC. Slate mode may be thought of as indicating 
            that the Tablet PC is currently detached from a hardware keyboard.  An example is a Windows Surface with a detachable keyboard.  When the 
            keyboard is attached, though the device is a still a Tablet PC, it is functioning like a laptop, therefore Slate mode is off.  When the 
            keyboard is detached, the device is functioning as a tablet, i.e. in slate mode.</summary>
        </member>
        <member name="P:CodeBase.ODEnvironment.MachineName">
            <summary>Always client name.  If on RDP, gets client name, never server name. If Web mode, sends a request to the browser to get the computer name.</summary>
        </member>
        <member name="M:CodeBase.ODEnvironment.SetMachineName">
            <summary>Only called from FormOpenDentalThreads.ODCloudMachineName thread once per minute. Does nothing for regular (!ODBuild.IsWeb) instances. For IsWeb, this will
            attempt to get the local computer name from the ODCloudClient.  If ODCloudClient isn't running or we get an error, machine name will be "UNKNOWN" and this will try again
            the next time it's called by the ODCloudMachineName thread.  Once the machine name is retrieved from ODCloudClient successfully (_machineName!="UNKNOWN") this will not
            attempt to retrieve the local computer name again while this instance is running.</summary>
        </member>
        <member name="M:CodeBase.ODEnvironment.IdIsThisComputer(System.String)">
            <summary>Will return true if the provided id matches the local computer name or a local IPv4 or IPv6 address. Will return false if id is 'localhost' or '127.0.0.1'. Returns false in all other cases.</summary>
        </member>
        <member name="M:CodeBase.ODEnvironment.IsRunningOnDbServer(System.String)">
            <summary>Will return true if the provided servername matches the local computer name or a local IPv4 or IPv6 address.  Will return true if servername is 'localhost' or '127.0.0.1'.  Returns false in all other cases.</summary>
        </member>
        <member name="M:CodeBase.ODEnvironment.IsRunningAsAdministrator">
            <summary>Returns true if the current application is running as an administrator.  Otherwise; false.  Throws exceptions.</summary>
        </member>
        <member name="M:CodeBase.ODEnvironment.GetLocalIPAddress">
            <summary>Returns an IPv4 address for the local machine. Returns an empty string if one cannot be found.</summary>
        </member>
        <member name="M:CodeBase.ODEnvironment.GetDefaultGateway">
            <summary>Returns the default gateway for the local machine. Returns an empty string if one cannot be found.</summary>
        </member>
        <member name="M:CodeBase.ODEnvironment.IsWindows7(System.Boolean)">
            <summary>This method checks the product version of the kernel32.dll to determine if the current OS is running Windows 7 or not.
            Throws exceptions by default.  Pass false to swallow all exceptions.</summary>
        </member>
        <member name="T:CodeBase.ODEvent">
            <summary>Helper class to allow multiple areas of the program to subscribe to various events which they care about.</summary>
        </member>
        <member name="E:CodeBase.ODEvent.Fired">
            <summary>Occurs when any developer calls Fire().  Can happen from anywhere in the program.
            Consumers of "global" ODEvents need to register for this handler because this will be the event that mainly gets fired.</summary>
        </member>
        <member name="M:CodeBase.ODEvent.Fire(CodeBase.ODEventType,System.Object)">
            <summary>Triggers the global Fired event to get called with the passed in arguments.</summary>
        </member>
        <member name="T:CodeBase.ODEventArgs">
            <summary>Arguments specifically designed for use in ODEvent.</summary>
        </member>
        <member name="P:CodeBase.ODEventArgs.Tag">
            <summary>A generic object related to the event, such as a Commlog object.  Can be null.</summary>
        </member>
        <member name="P:CodeBase.ODEventArgs.EventType">
            <summary>Used to uniquly identify this ODEvent for consumers.  And event type of Undefined will be treated as a generic ODEvent.</summary>
        </member>
        <member name="M:CodeBase.ODEventArgs.#ctor(CodeBase.ODEventType)">
            <summary>Used when an ODEvent is needed but no object is needed in the consuming class.</summary>
        </member>
        <member name="M:CodeBase.ODEventArgs.#ctor(CodeBase.ODEventType,System.Object)">
            <summary>Creates an ODEventArg with the specified ODEventType and Tag passed in that is designed to be Fired to a progress window.</summary>
            <param name="eventType">Progress windows registered to this ODEventType will consume this event arg and act upon the tag accordingly.
            An event type of Undefined will be treated as a generic ODEvent.</param>
            <param name="tag">Tag can be set to anything that the consumer may need.  E.g. a string for FormProgressStatus to show to users.</param>
        </member>
        <member name="T:CodeBase.ODEventHandler">
            <summary>Only used for ODEvent.  Not necessary to reference this delegate directly.</summary>
        </member>
        <member name="T:CodeBase.ODEventType">
            <summary>Progress windows will be monitoring for these specific event types.  New ones should be alphabetical.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.Undefined">
            <summary>0 - The event type has not been set.  Treated as a generic ODEvent.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.AppointmentEdited">
            <summary>Events that occur when a change has been made to an Appointment.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.Billing">
            <summary></summary>
        </member>
        <member name="F:CodeBase.ODEventType.BugSubmission">
            <summary></summary>
        </member>
        <member name="F:CodeBase.ODEventType.Cache">
            <summary>These events will get fired sporadically throughout the FormOpenDental.DataValid_BecameInvalid process.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.Clearinghouse">
            <summary></summary>
        </member>
        <member name="F:CodeBase.ODEventType.Clinic">
            <summary></summary>
        </member>
        <member name="F:CodeBase.ODEventType.CommItemSave">
            <summary>Events that occurs when the commitem window should automatically save.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.ConfirmationList">
            <summary></summary>
        </member>
        <member name="F:CodeBase.ODEventType.ContrImages">
            <summary>Events that occur during Images Module operations.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.ConvertDatabases">
            <summary></summary>
        </member>
        <member name="F:CodeBase.ODEventType.CrashedTable">
            <summary>Events that occurs when a crashed table has been detected.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.DatabaseMaint">
            <summary>A database maintenance progress event.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.DataConnection">
            <summary>Events that occurs during data connection operations.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.DataReaderNull">
            <summary>Events that cccur when unable to read from the MySQL data adapter.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.eClipboard">
            <summary>Events that occur when any eClipboard device experiences a status change.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.EmailSave">
            <summary>Events that occurs when the Email Message Edit window should automatically save.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.ErxBrowserClosed">
            <summary>Event that occurs when the eRx browser window has closed.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.EServices">
            <summary></summary>
        </member>
        <member name="F:CodeBase.ODEventType.Etrans">
            <summary></summary>
        </member>
        <member name="F:CodeBase.ODEventType.FeeSched">
            <summary></summary>
        </member>
        <member name="F:CodeBase.ODEventType.FormClaimSend_GoTo">
            <summary>Events that occurs when FormClaimSend has invoked the GoTo action.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.FormProcNotBilled_GoTo">
            <summary>Events that occurs when FormProcNotBilled has invoked the GoTo action.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.HideUnusedFeeSchedules">
            <summary>Event that occurs when hiding unused fee schedules.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.InsVerification">
            <summary>Event that occurs when filling the Insurance Verification list.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.Job">
            <summary>Event that occurs within job related windows and events at HQ.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.MiddleTierConnection">
            <summary>Events that occurs during Middle Tier connection operations.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.MiscData">
            <summary>Miscellaneous things like backing up and repairing the database.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.ModuleSelected">
            <summary>Events that occur when a Module is selected/refreshed.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.ODGrid">
            <summary>Events that occurs during long ODGrid computations.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.Patient">
            <summary></summary>
        </member>
        <member name="F:CodeBase.ODEventType.PrefL">
            <summary></summary>
        </member>
        <member name="F:CodeBase.ODEventType.ProgressBar">
            <summary>This can be used for any event fired from within a progress bar action.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.Provider">
            <summary></summary>
        </member>
        <member name="F:CodeBase.ODEventType.QueryMonitor">
            <summary>Events that occur when a query or Middle Tier web call has started or finished executing.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.RecallSync">
            <summary></summary>
        </member>
        <member name="F:CodeBase.ODEventType.ReportComplex">
            <summary>There is currently no progress bar around most of ReportComplex.  Only the queries have progress bars.  Leaving the events in place for now.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.Schedule">
            <summary></summary>
        </member>
        <member name="F:CodeBase.ODEventType.SendToPinboard">
            <summary>Events that occurs when the user sends an appointment to the pinboard from DashApptGrid.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.ServiceCredentials">
            <summary>Events that occurs when credentials have failed.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.Shutdown">
            <summary>The program is shutting down.</summary>
        </member>
        <member name="F:CodeBase.ODEventType.Userod">
            <summary>Events that occur during Userod operations.  e.g. changing users</summary>
        </member>
        <member name="F:CodeBase.ODEventType.WikiSave">
            <summary>Events that occurs when the wiki edit window should automatically save.</summary>
        </member>
        <member name="M:CodeBase.ODExceptionExtensions.DoNothing(System.Exception)">
            <summary>Does nothing to the object except reference it. Useful for handling the Exception ex declared but never used warning.</summary>
        </member>
        <member name="F:CodeBase.ODException._query">
            <summary>Contains query text when an ErrorCode in the 700s was thrown. This is the query that was attempted prior to an exception.</summary>
        </member>
        <member name="P:CodeBase.ODException.ErrorCode">
            <summary>Gets the error code associated with this exception.  Defaults to 0 if no error code was explicitly set.</summary>		
        </member>
        <member name="P:CodeBase.ODException.Query">
            <summary>Contains query text when an ErrorCode in the 700s was thrown. This is the query that was attempted prior to an exception.</summary>
        </member>
        <member name="M:CodeBase.ODException.GetErrorCodeAsEnum(System.Int32)">
            <summary>Convert an int to an Enum typed ErrorCode. Returns NotDefined if the input errorCode is not defined in ErrorCodes.</summary>		
        </member>
        <member name="P:CodeBase.ODException.ErrorCodeAsEnum">
            <summary>Gets the pre-defined error code associated to this exception.  
            Defaults to NotDefined if the error code (int) specified is not defined in ErrorCodes enum.</summary>		
        </member>
        <member name="M:CodeBase.ODException.#ctor(System.String,System.String,System.Exception)">
            <summary>Used for query based exceptions in Db.cs</summary>
        </member>
        <member name="M:CodeBase.ODException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used for serialization.</summary>
        </member>
        <member name="M:CodeBase.ODException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used for serialization.</summary>
        </member>
        <member name="M:CodeBase.ODException.SwallowAnyException(System.Action)">
            <summary>Wrap the given action in a try/catch and swallow any exceptions that are thrown. 
            This should be used sparingly as we typically want to handle the exception or let it bubble up to the UI but sometimes you just want to ignore it.</summary>
        </member>
        <member name="M:CodeBase.ODException.SwallowAndLogAnyException(System.String,System.Action)">
            <summary>Swallows and logs any exception that thrown from executing the action..</summary>
        </member>
        <member name="M:CodeBase.ODException.TryThrowPreservedCallstack(System.Exception)">
            <summary>Does nothing if the exception passed in is null. Preserves the callstack of the exception passed in.
            Typically used when a work thread throws an exception and we want to wait until we are back on the main thread in order to throw the exception.
            Calling this when there is no worker thread involved is harmless and unnecessary but will still preserve the call stack.</summary>
        </member>
        <member name="T:CodeBase.ODException.ErrorCodes">
            <summary>Predefined ODException.ErrorCode field values. ErrorCode field is not limited to these values but this is a convenient way defined known error types.
            These values must be converted to/from int in order to be stored in ODException.ErrorCode.
            Number ranges are arbitrary but should reserve plenty of padding for the future of a given range.
            Each number range should share a similar prefix between all of it's elements.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.NotDefined">
            <summary>0 is the default. If the given (int) ErrorCode is not defined here, it will be returned at 0 - NotDefined.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.ODSocketNotFoundForRegKeyNum">
            <summary>No immortal socket connection found for this RegistrationKeyNum.
            The Proxy is trying to communicate with this eConnector but the eConnector does not have an active connection.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.ODSocketEConnectorNotResponding">
            <summary>Immortal socket connection was found by Proxy but the remote eConnector socket is not responding. 
            Most likely because the eConnector has been turned off but the Proxy has not performed an ACK to discover that it's off.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.OtkArgsInvalid">
            <summary>.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.OtkCreationFailed">
            <summary>.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.MaxRequestDataExceeded">
            <summary>.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.XWebProgramProperties">
            <summary>.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.PayConnectProgramProperties">
            <summary>.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.WebPaySetup">
            <summary>.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.DoseSpotNotAuthorized">
            <summary>DoseSpot user not authorized to perform action.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.XWebDTGFailed">
            <summary>An API request to XWeb DTG was failed by XWeb.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.NoPatientFound">
            <summary>No patient found that matches the specified parameters.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.MultiplePatientsFound">
            <summary>More than one patient found that matches the specified parameters.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.NoAppointmentFound">
            <summary>No appointment found that matches the specified parameters.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.TimeSlotInvalid">
            <summary>The time slot provided was not found or invalid.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.ResponseStatusInvalid">
            <summary>The response status provided is not acceptable.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.NoAsapCommFound">
            <summary>No asapcomm found that matches the specified parameters.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.NoOperatoriesSetup">
            <summary>No operatories have been set up for Web Sched.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.NoRecallFound">
            <summary>Recall not found for specified patient</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.RecallAlreadyScheduled">
            <summary>Recall has already been scheduled</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.SessionExpired">
            <summary>The user's session has expired.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.CheckUserAndPasswordFailed">
            <summary>After successfully logging in to Open Dental, a middle tier call to Userods.CheckUserAndPassword returned an "Invalid user or password" error.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.DbQueryError">
            <summary>Generic database command failed to execute.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.BugSubmissionMessage">
            <summary>Specific error code that represents an unhandled exception that has a uniquely formatted Message property.
            The goal of this special error code is to preserve StackTrace information from inner exceptions.
            The first line of this UE's Message property will become the bug submission's ExceptionMessageText field.
            All subsequent lines of this UE's Message property will become the bug submission's ExceptionStackTrace field.
            This specific ErrorCode will be looked for within the heart of the BugSubmission constructor.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.ZipwhipPendingVerification">
            <summary>Zipwhip verification pending.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.NoAvailableHttpsShortUrlRedirectDomains">
            <summary>An individual SMS is trying to include an HTTPS short url redirect link, but has already used all available HTTPS enabled domains
            on previous send attempts.  This should be used to simply fail the SMS.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.FileExists">
            <summary>The file trying to write exists.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.ODCloudClientTimeout">
            <summary>Unable to communicate with ODCloudClient.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.ClaimArchiveFailed">
            <summary>Error occurred when attempting to archive old claims.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.BrowserTimeout">
            <summary>Unable to communicate with the browser.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.LamportsBakeryLockMaxAttempts">
            <summary>Failed to execute locking logic more than the permitted number of attempts.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.LamportsBakeryMissingTicket">
            <summary>A request/ticket to lock a process has been lost while evaluating locking queue.</summary>
        </member>
        <member name="F:CodeBase.ODException.ErrorCodes.ShortCodes">
            <summary>A Short Code related error.</summary>
        </member>
        <member name="M:CodeBase.ODImaging.GetFormatInfo(System.Drawing.Imaging.PixelFormat,System.Int32@,System.Int32@,System.Int32@)">
            <summary>Returns the bits per channel, channels per pixel and bytes per pixel of the given pixel format. However, the pixel format must contain the same number of bits per channel. Additionally, future pixel formats may not be supported by this function.</summary>
        </member>
        <member name="M:CodeBase.ODImaging.AntiAlias(System.Drawing.Bitmap,System.Int32)">
            <summary>Performs anti-alias correction on the input image and returns the anti-aliased image in a new memory location (the  input image is unchanged).</summary>
        </member>
        <member name="M:CodeBase.ODImaging.ImageApplyOrientation(System.Drawing.Image)">
            <summary>Rotates the passed in image based on Windows orientation. When an image is imported, this flag can be checked to orient it properly. Once imported, OD does not use these flags.</summary>
        </member>
        <member name="M:CodeBase.ODImaging.ImageScaleMaxHeightAndWidth(System.Drawing.Image,System.Int64,System.Int64)">
            <summary>Returns a Bitmap of the passed in image scaled to the given height and width.</summary>
        </member>
        <member name="F:CodeBase.ODFileUtils._rand">
            <summary>This is a class scope variable in order to ensure that the random value is only seeded once for each time OD is launched.
            Otherwise, if instantiated more often, then the same random numbers are generated over and over again.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.RemoveTrailingSeparators(System.String)">
            <summary>Removes a trailing path separator from the given string if one exists.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.CombinePaths(System.String[])">
            <summary>OS independent path cominations. Ensures that each of the given path pieces are separated by the correct path separator for the current operating system. There is guaranteed not to be a trailing path separator at the end of the returned string (to accomodate file paths), unless the last specified path piece in the array is the empty string.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.CombinePaths(System.String[],System.Char)">
            <summary>Ensures that each of the given path pieces are separated by the passed in separator character. 
            There is guaranteed not to be a trailing path separator at the end of the returned string (to accomodate file paths), 
            unless the last specified path piece in the array is the empty string.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.GetDiskFreeSpace(System.String,System.UInt64@)">
            <summary>This function takes a valid folder path.  Accepts UNC paths as well.  freeBytesAvail will contain the free space in bytes of the drive containing the folder.
            It returns false if the function fails.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.CreateRandomFile(System.String,System.String,System.String)">
            <summary>Creates a new randomly named file in the given directory path with the given extension and returns the full path to the new file.
            The file name will include the local date and time down to the second.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.CreateRandomFolder(System.String)">
            <summary>Throws exceptions when there are permission issues.  Creates a new randomly named subdirectory inside the given directory path and returns the full path to the new subfolder.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.AppendSuffix(System.String,System.String)">
            <summary>Appends the suffix at the end of the file name but before the extension.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.CleanFileName(System.String)">
            <summary>Removes invalid characters from the passed in file name.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.ProcessStart(System.Diagnostics.Process)">
            <summary>Start the given process.  
            If using a WEB compiled version of Open Dental, pass through to the odcloud client to start the process locally.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.ProcessStart(System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>Start a new process with the given path and arguments.  
            If using a WEB compiled version of Open Dental, pass through to the odcloud client to start the process locally.</summary>
            <param name="doWaitForODCloudClientResponse">If true, will wait for ODCloudClient and throw any exceptions from it.</param>
            <param name="createDirIfNeeded">If included, will create the directory if it doesn't exist.</param>
        </member>
        <member name="M:CodeBase.ODFileUtils.WriteAllText(System.String,System.String,System.Boolean)">
            <summary>Write the given text to the given file.  
            If using a WEB compiled version of Open Dental, pass through to the odcloud client for File IO.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.WriteAllTextThenStart(System.String,System.String,System.String,System.Boolean)">
            <summary>Write the given text to the given file, then start a new process with the given path.  
            If using a WEB compiled version of Open Dental, pass through to the odcloud client for File IO and to start the process locally.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.WriteAllTextThenStart(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>Write the given text to the given file, then start a new process with the given path.  
            If using a WEB compiled version of Open Dental, pass through to the odcloud client for File IO and to start the process locally.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.WriteAllTextThenStart(System.String,System.String,System.Text.Encoding,System.String,System.String)">
            <summary>Write the given text to the given file, then start a new process with the given path.  
            If using a WEB compiled version of Open Dental, pass through to the odcloud client for File IO and to start the process locally.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.Bash(System.String)">
            <summary>Passes the command to the bash shell to run.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.WriteAllBytesThenStart(System.String,System.Byte[],System.String)">
            <summary>Write the given filebytes and launches a file.</summary>
            <param name="filePath">The location to write the bytes to.</param>
            <param name="fileBytes">The bytes to write to the file.</param>
            <param name="processPath">The path of the file to launch.</param>
        </member>
        <member name="M:CodeBase.ODFileUtils.WriteAllBytesThenStart(System.String,System.Byte[],System.String,System.String,System.Int32)">
            <summary>Write the given filebytes and launches a file.</summary>
            <param name="filePath">The location to write the bytes to.</param>
            <param name="fileBytes">The bytes to write to the file.</param>
            <param name="processPath">The path of the file to launch.</param>
            <param name="commandLineArgs">Command line arguments to pass to processPath.</param>
            <param name="millisecondsToSleep">Time for thread to sleep between the program writing to a file and launching. Not always necessary. Currently only used for dexis integrator.</param>
        </member>
        <member name="M:CodeBase.ODFileUtils.Compress(System.Drawing.Bitmap)">
            <summary>Reduces image size by changing it to Jpeg format and reducing image quality to 40%.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.GetProgramDirectory">
            <summary>Returns the directory in which the program executable rests. To get the full path for the program executable, use Applicaiton.ExecutablePath.</summary>
        </member>
        <member name="M:CodeBase.ODFileUtils.GetFilePathsFromText(System.String)">
            <summary>Creates a list of all filepaths found in the given text. If path is to specific file (ex.- ~/test/test.txt)
            then the parent directory will be returned (~/test).
            Overview: Files can start with \\ or, drive colon slash (ex. C:\ or F:/). 
            Filepaths that end with folder (no extension) must end with slash followed by either a space (or return), period, comma, semi-colon, or end-of-file
            Filepaths that end with an extension (.txt) can be followed with a space (or return), period, comma or semi-colon, or end-of-file and stil be found
            Regex breakdown: Split into two groups: \\ and X:\ (where X is any mapped drive letter)
            	All capturing groups will be found based on the existence of a space (or return), period, comma, semi-colon, or end-of-file
            First alternative capuring group: 
            	(\\\\\w(([\w. \\-]*?)(?=(\\)[\s,.;]|(\\)\z) -- start with \\ and end in slash
            	| [\w. \\-]*?(\.[a-zA-Z]{1,4}(?=[\s,.;]|\z)))) -- still staring with \\ but ending in a file extension (i.e .txt)
            Second alternative capturing group: 
            	([a-zA-Z]\:(\\|\/) -- start with letter drive immediately followed by colon and a slash.
            	((\s|\z) | \w[\w-. \\\/]*?((?=(\\|\/)[\s,.;](\\|\/)\z) -- Find all paths without extensions
            	| (\.[a-zA-Z]{1,4}(?=[\s,.;]))))) -- OR find all paths with a file extension
            </summary>
            <param name="text">Plain text that could contain filepaths.</param>
            <returns>List of UNC Paths</returns>
        </member>
        <member name="M:CodeBase.ODMathLib.IntersectSegments(System.Single,System.Single,System.Single,System.Single)">
            <summary>Returns the closed intersection of the given two segments [x1,x2] and [x3,x4]. Returns no floats is there is no intersection and returns 2 floats if the intersection is a segment (although both segment points may be the same).</summary>
        </member>
        <member name="M:CodeBase.ODMathLib.IntersectRectangles(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Returns the intersection of the given two rectangles as a set of 4 floats in the order (x,y,w,h), or returns an array of 0 floats if the two rectangles do not intersect.  jordan Probably obsolete and needs to be removed soon.</summary>
        </member>
        <member name="M:CodeBase.ODMathLib.Max(System.DateTime,System.DateTime)">
            <summary>Equivalent to Math.Max for DateTimes.</summary>
        </member>
        <member name="M:CodeBase.ODMathLib.Min(System.DateTime,System.DateTime)">
            <summary>Equivalent to Math.Min for DateTimes.</summary>
        </member>
        <member name="T:CodeBase.LogWriter">
            <summary>Class that writes to the specified logger directory.</summary>
        </member>
        <member name="F:CodeBase.LogWriter.EndWriteLine">
            <summary>Optional action that can be performed at the end of WriteLine.</summary>
        </member>
        <member name="M:CodeBase.LogWriter.#ctor">
            <summary>For serialization.</summary>
        </member>
        <member name="T:CodeBase.LogRequest">
            <summary>Class that generates a unique ID and includes it in every line it logs.</summary>
        </member>
        <member name="M:CodeBase.LogRequest.#ctor">
            <summary>For serialization.</summary>
        </member>
        <member name="M:CodeBase.LogRequest.GetCallingMethod">
            <summary>Gets the name of the method that is calling WriteLine().</summary>
        </member>
        <member name="T:CodeBase.LogDelegate">
            <summary>An implementation of the IWriteLine interface that allows you to specify a delegate to run.</summary>
        </member>
        <member name="M:CodeBase.LogDelegate.#ctor">
            <summary>For serialization.</summary>
        </member>
        <member name="T:CodeBase.LogLevel">
            <summary>0=Error, 1=Information, 2=Verbose</summary>
        </member>
        <member name="F:CodeBase.LogLevel.Error">
            <summary>0 Logs only errors.</summary>
        </member>
        <member name="F:CodeBase.LogLevel.Information">
            <summary>1 Logs information plus errors.</summary>
        </member>
        <member name="F:CodeBase.LogLevel.Verbose">
            <summary>2 Most verbose form of logging (use sparingly for very specific troubleshooting). Logs all entries all the time.</summary>
        </member>
        <member name="T:CodeBase.LogPhase">
            <summary>Used by LogToPath to decide if it needs to make a start entry, end entry, or unspecified for empirical log entries.</summary>
        </member>
        <member name="T:CodeBase.LogPath">
            <summary>Used by LogToPath to decide which folder to log to.</summary>
        </member>
        <member name="T:CodeBase.MsgBoxCopyPaste">
            <summary>
            Summary description for FormBasicTemplate.
            </summary>
        </member>
        <member name="F:CodeBase.MsgBoxCopyPaste.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodeBase.MsgBoxCopyPaste.#ctor(System.String)">
            <summary>This presents a message box to the user, but is better because it allows us to copy the text and paste it into another program for testing.  Especially useful for queries.</summary>
        </member>
        <member name="M:CodeBase.MsgBoxCopyPaste.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CodeBase.MsgBoxCopyPaste.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CodeBase.MsgBoxCopyPaste.pd_PrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>Called for each page to be printed.</summary>
        </member>
        <member name="M:CodeBase.MsgBoxCopyPaste.Print(System.Drawing.Graphics,System.Int32,System.Drawing.Rectangle)">
            <summary>Prints one page. Returns true if pageToPrint is the last page in this print job.</summary>
        </member>
        <member name="T:CodeBase.ODThread">
            <summary>A wrapper for the c# Thread class.  The purpose of this class is to help implement a well defined pattern throughout our applications.  It also allows us to better document threading where C# lacks documentation.  Since there is no way to get the list of managed threads for an application, the only way we can maintain a list is to do it ourselves.  The advantage of maintaining a list of managed threads is that we can much more easily ensure that all threads are gracefully quit when the program exits.</summary>
        </member>
        <member name="F:CodeBase.ODThread._thread">
            <summary>The C# thread that is used to run ODThread internally.</summary>
        </member>
        <member name="F:CodeBase.ODThread._waitEvent">
            <summary>Sleep timer which can be interrupted elegantly.</summary>
        </member>
        <member name="F:CodeBase.ODThread._waitEventAsyncQuitComplete">
            <summary>Created and returned when QuitAsync is called. Will be invoked at the end of the thread right as thread exits.</summary>
        </member>
        <member name="F:CodeBase.ODThread._dateTimeStart">
            <summary>The exact time when this thread was started.  Useful for determining thread run times.</summary>
        </member>
        <member name="F:CodeBase.ODThread._dateTimeQuit">
            <summary>The exact time when this thread was quit.  Useful for determining thread run times.</summary>
        </member>
        <member name="F:CodeBase.ODThread._hasQuit">
            <summary>Gets set to true when QuitSync() or QuitAsync() has been called or if this thread has finished and no timed interval was set.</summary>
        </member>
        <member name="F:CodeBase.ODThread.TimeIntervalMS">
            <summary>The amount of time in milliseconds that this thread will sleep before calling the WorkerDelegate again.  Setting the interval to zero or a negative number will call the WorkerDelegate once and then quit itself.</summary>
        </member>
        <member name="F:CodeBase.ODThread._worker">
            <summary>Pointer to the function from the calling code which will perform the majority of this thread's work.</summary>
        </member>
        <member name="F:CodeBase.ODThread._exceptionHandler">
            <summary>Pointer to the function from the calling code which will be alerted when the run function has thrown an unhandled exception.</summary>
        </member>
        <member name="F:CodeBase.ODThread._exitHandler">
            <summary>Pointer to the function from the calling code which will be alerted when the run function has completed.  This will NOT fire if Join() times out.</summary>
        </member>
        <member name="F:CodeBase.ODThread._setupHandler">
            <summary>Pointer to the function from the calling code which will be run before the main worker delegate starts.</summary>
        </member>
        <member name="F:CodeBase.ODThread._onInitialize">
            <summary>Pointer to the function that runs in the constructor of ODThread.</summary>
        </member>
        <member name="F:CodeBase.ODThread.Tag">
            <summary>Custom data which can be set before launching the thread and then safely accessed within the WorkerDelegate.  Helps prevent the need to lock objects due to multi-threading, most of the time.</summary>
        </member>
        <member name="F:CodeBase.ODThread.Parameters">
            <summary>Custom data which can be used within the WorkerDelegate.  Helps prevent the need to lock objects due to multi-threading, most of the time.</summary>
        </member>
        <member name="F:CodeBase.ODThread.GroupName">
            <summary>Used to identify groups of ODThread objects.  Helpful when you need to wait for or quit an entire group of threads.  Initially set to "default".</summary>
        </member>
        <member name="F:CodeBase.ODThread._listOdThreads">
            <summary>Global list of all ODThreads which have not been quit.  Used for thread group operations.</summary>
        </member>
        <member name="F:CodeBase.ODThread._lockObj">
            <summary>Thread safe lock object.  Any time a static variable is accessed, it MUST be wrapped with a lock.  Failing to lock will result in a potential for unsafe access by multiple threads at the same time.</summary>
        </member>
        <member name="F:CodeBase.ODThread._isAutoCleanup">
            <summary>Only set when calling Start().  Causes this thread to automatically remove itself from the global list of ODThreads once it has finished doing work.</summary>
        </member>
        <member name="F:CodeBase.ODThread._actionUnhandledException">
            <summary>Used internally by RegisterForUnhandled().</summary>
        </member>
        <member name="F:CodeBase.ODThread._databaseContext">
            <summary>Stores the object that was returned via the func GetDatabaseContext which was invoked in the constructor.</summary>
        </member>
        <member name="F:CodeBase.ODThread.GetDatabaseContextParent">
            <summary>This func gets invoked within the constructor of this thread.  The goal is to capture the database context of the parent thread.
            The object that is returned from this func will get stored in a local variable and then passed into the SetDatabaseContext action
            within Run() which will officially be executing within this new threads context.
            This is so that this new thread can inherit the database context of the parent when a database is being used with ODThread.</summary>
        </member>
        <member name="F:CodeBase.ODThread.SetDatabaseContextChild">
            <summary>This action will get invoked at the beginning of Run() so that calling methods have a chance to pass along the database context of the
            parent thread onto this new thread that was just spawned.</summary>
        </member>
        <member name="F:CodeBase.ODThread._queryMonitor">
            <summary>Stores the object that was returned via the func GetQueryMonitorParent which was invoked in the constructor.</summary>
        </member>
        <member name="F:CodeBase.ODThread.GetQueryMonitorParent">
            <summary>This func gets invoked within the constructor of this thread.  The goal is to capture the QueryMonitor of the parent thread.
            The object that is returned from this func will get stored in a local variable and then passed into the SetQueryMonitorChild action
            within Run() which will officially be executing within this new threads context.
            This is so that this new thread can inherit the QueryMonitor of the parent when a database is being used with ODThread.</summary>
        </member>
        <member name="F:CodeBase.ODThread.SetQueryMonitorChild">
            <summary>This action will get invoked at the beginning of Run() so that calling methods have a chance to pass along the QueryMonitor of the
            parent thread onto this new thread that was just spawned.</summary>
        </member>
        <member name="F:CodeBase.ODThread._wasAbortAttempted">
            <summary>Used to indicate if abort has been called on a thread. Used to catch ALL exceptions after a thread has been aborted.</summary>
        </member>
        <member name="P:CodeBase.ODThread.HasQuit">
            <summary>Indicates if ODThread has been scheduled to quit. Check this from within a resource intensive thread periodically if you want to exit gracefully during the course of the WorkerDelegate function.</summary>
        </member>
        <member name="P:CodeBase.ODThread.Name">
            <summary>Gets or sets the name of the C# thread to make it easier to find specific threads while debugging.</summary>
        </member>
        <member name="M:CodeBase.ODThread.#ctor(CodeBase.ODThread.WorkerDelegate)">
            <summary>Creates a thread that will only run once after Start() is called.</summary>
        </member>
        <member name="M:CodeBase.ODThread.#ctor(CodeBase.ODThread.WorkerDelegate,System.Object[])">
            <summary>Creates a thread that will only run once after Start() is called.</summary>
        </member>
        <member name="M:CodeBase.ODThread.#ctor(System.Int32,CodeBase.ODThread.WorkerDelegate,System.Object[])">
            <summary>Creates a thread that will continue to run the WorkerDelegate after Start() is called and will stop running once one of the quit methods has been called or the application itself is closing.  timeIntervalMS (in milliseconds) determines how long the thread will wait before executing the WorkerDelegate again.  Set timeIntervalMS to zero or a negative number to have the WorkerDelegate only execute once and then quit itself.</summary>
        </member>
        <member name="M:CodeBase.ODThread.StartThreadsByGroupName(System.String)">
            <summary>Start all threads for a given group. If thread has already been started then take no action on that thread.</summary>
        </member>
        <member name="M:CodeBase.ODThread.Start(System.Boolean)">
            <summary>Starts the thread and returns immediately.  If the thread is already started or has already finished, then this function will have no 
            effect.  Set isAutoCleanup to true to have this thread automatically remove itself from the global list of ODThreads once it has finished doing
            work.</summary>
        </member>
        <member name="M:CodeBase.ODThread.Wakeup">
            <summary>If the thread is currently waiting, this will interrupt the wait and force the thread to continue running instantly.</summary>
        </member>
        <member name="M:CodeBase.ODThread.Wait(System.Int32)">
            <summary>Typically when called from outside of ODThread, is used in conjunction with _setupHandler to delay the start of a thread.
            Better than using a thread sleep because it can be 'woken up' using Wakeup().</summary>
        </member>
        <member name="M:CodeBase.ODThread.Run">
            <summary>Main thread loop that executes the WorkerDelegate and sleeps for the designated timeIntervalMS (in milliseconds) if one was set.
            Cleans up thread if set to autocleanup.</summary>
        </member>
        <member name="M:CodeBase.ODThread.SetupRunTeardown">
            <summary>Main thread loop that executes the WorkerDelegate and sleeps for the designated timeIntervalMS (in milliseconds) if one was set.</summary>
        </member>
        <member name="M:CodeBase.ODThread.WorkerExceptionHandler(System.Exception)">
            <summary>Calls the appropriate exception handler for this exception. Returns false if the thread needs to quit.</summary>
        </member>
        <member name="M:CodeBase.ODThread.HandleUnhandledExceptionOrThrow(System.Exception)">
            <summary>If the program has registered for catching unhandled exception, that handler will be invoked. Otherwise, the exception will be
            thrown which will hard crash the program.</summary>
        </member>
        <member name="M:CodeBase.ODThread.Join(System.Int32)">
            <summary>Forces the calling thread to synchronously wait for the current thread to finish doing work.  Pass Timeout.Infinite into timeoutMS if you wish to wait as long as necessary for the thread to join.  The thread will be aborted if the timeout was reached and then will return false.</summary>
        </member>
        <member name="M:CodeBase.ODThread.AddGroupNameExitHandler(System.String,System.EventHandler)">
            <summary>Raises onExit when all thread's from the given groupName have exited. Returns immediately.</summary>
        </member>
        <member name="M:CodeBase.ODThread.JoinThreadsByGroupName(System.Int32,System.String,System.Boolean)">
            <summary>Synchronously waits for all threads in the specified group to finish doing work.  Pass Timeout.Infinite into timeoutMS if you wish to wait as long as necessary for all threads to join.  Set doRemoveThreads to true to remove all threads from the global list of threads.</summary>
        </member>
        <member name="M:CodeBase.ODThread.QuitAsync">
            <summary>Immediately returns after flagging the thread to quit itself asynchronously.  The thread may execute a bit longer.  If the thread has been forgotten, it will be forcefully quit on closing of the main application.</summary>
        </member>
        <member name="M:CodeBase.ODThread.QuitAsync(System.Boolean)">
            <summary>Immediately returns after flagging the thread to quit itself asynchronously.  The thread may execute a bit longer.  
            If the thread has been forgotten, it will be forcefully quit on closing of the main application.  
            Set removeThread false if you want this thread to stay in the global list of ODThreads.
            Returns a WaitHandle that will each when the respective thread has officially exited. 
            Wait on this handle if you want to quit async and wait for results without joining back to the main thread.</summary>
        </member>
        <member name="M:CodeBase.ODThread.QuitSync(System.Int32)">
            <summary>Waits for this thread to quit itself before returning.  If the thread has been forgotten, it will be forcefully quit on closing of the main application.</summary>
        </member>
        <member name="M:CodeBase.ODThread.QuitAsyncThreadsByGroupName(System.String,System.Boolean)">
            <summary>Asynchronously quits all threads that have the passed in group name.
            Optionally have this quit method remove the threads from the global list of threads.
            Returns a list of WaitHandles that will each fire when their respective thread has officially exited. 
            Wait on these handles if you want to quit async and wait for results without joining back to the main thread.</summary>
        </member>
        <member name="M:CodeBase.ODThread.QuitSyncThreadsByGroupName(System.Int32,System.String)">
            <summary>Waits for ALL threads in the group to finish doing work before returning.  Each thread will be given the timeoutMS to quit.  Try to keep in mind how many threads are going to be quitting when setting the milliseconds for the timeout.  If the thread has been forgotten, it will be forcefully quit on closing of the main application.  Removes all threads from the global list of ODThreads after the threads have quit.</summary>
        </member>
        <member name="M:CodeBase.ODThread.QuitSyncAllOdThreads(System.Int32)">
            <summary>Should only be called when the main application is closing.  Loops through ALL ODThreads that are still running and aborts them instantly.  If you want to give each thread a chance to gracefully quit, call QuitSyncThreadsByGroupName instead.</summary>
        </member>
        <member name="M:CodeBase.ODThread.GetThreadsByGroupName(System.String)">
            <summary>Returns the specified group of threads in the same order they were created.  If groupName is empty, then returns the list of all current ODThreads.</summary>
        </member>
        <member name="M:CodeBase.ODThread.AddExceptionHandler(CodeBase.ODThread.ExceptionDelegate)">
            <summary>Add an exception handler to be alerted of unhandled exceptions in the work delegate.</summary>
        </member>
        <member name="M:CodeBase.ODThread.AddExitHandler(CodeBase.ODThread.WorkerDelegate)">
            <summary>Add an exit handler that will get fired once the thread loop has exited.
            Fires in the context of this thread not the context of the calling / creating thread.
            Make sure to use Invoke or BeginInvoke if you are going to be manipulating UI elements from this handler.</summary>
        </member>
        <member name="M:CodeBase.ODThread.AddSetupHandler(CodeBase.ODThread.WorkerDelegate)">
            <summary>Add a delegate that will get called before the main worker delegate starts. If this is a thread that runs repeatedly at an interval,
            this delegate will only run before the first time the thread is run. It is implied that this is invoked from within the thread context.
            Make sure to use Invoke or BeginInvoke if you are going to be manipulating UI elements from this handler.</summary>
        </member>
        <member name="M:CodeBase.ODThread.AddInitializeHandler``1(System.Func{``0},System.Action{``0})">
            <summary>Adds a delegate that will be called every time a new ODThread is created. Useful for assigning thread static variables from one
            thread to another.</summary>
            <param name="runsOnParentThread">This Func will run on the thread that creates the new thread.</param>
            <param name="runsOnChildThread">This Action takes in the result from the Func and runs on the new thread that is created.</param>
        </member>
        <member name="M:CodeBase.ODThread.GetTimeElapsed">
            <summary>If the thread has not started, then returns 0.  If the thread has started but has not quit yet, then returns the amount of time which has elapsed since the thread was started.  If the thread has quit, returns the time elapsed between when the thread was started and when the thread was quit.</summary>
        </member>
        <member name="M:CodeBase.ODThread.RunParallel(System.Collections.Generic.List{System.Action},System.TimeSpan,System.Int32,CodeBase.ODThread.ExceptionDelegate,System.Boolean)">
            <summary>Spread the given actions over the given numThreads. Blocks until threads have completed or timeout is reached.
            If numThreads is not provided then numThreads will default to Environment.ProcessorCount. This is typically what you should let happen.
            If onException is provided then one and only one onException event will be raised when any number of exceptions occur.
            All actions will run to completion regardless if any/all throw unhandled exceptions.
            If the timeout is reached, all threads will be killed and their corresponding actions will not complete.  This can leave data in an 
            undefined state, for example, if an action times out before instantiating an object, the object will be null.
            Throws exception on main thread if any action throws and unhandled exception and no onException was provided.</summary>
        </member>
        <member name="M:CodeBase.ODThread.RunParallel(System.Collections.Generic.List{System.Action},System.Int32,System.Int32,CodeBase.ODThread.ExceptionDelegate,System.Boolean,System.Boolean)">
            <summary>Spread the given actions over the given numThreads. Blocks until threads have completed or timeout is reached.
            If numThreads is not provided then numThreads will default to Environment.ProcessorCount. This is typically what you should let happen.
            If onException is provided then one and only one onException event will be raised when any number of exceptions occur.
            All actions will run to completion regardless if any/all throw unhandled exceptions.
            If the timeout is reached, all threads will be killed and their corresponding actions will not complete.  This can leave data in an 
            undefined state, for example, if an action times out before instantiating an object, the object will be null.
            Throws exception on main thread if any action throws and unhandled exception and no onException was provided.</summary>
        </member>
        <member name="M:CodeBase.ODThread.RunParallelImproved(System.Collections.Generic.List{System.Action},System.Int32,System.Int32)">
            <summary>Spread the given actions over the given numThreads. Blocks until threads have completed or timeout is reached.
            If numThreads is not provided then numThreads will default to Environment.ProcessorCount. This is typically what you should let happen.
            If onException is provided then one and only one onException event will be raised when any number of exceptions occur.
            All actions will run to completion regardless if any/all throw unhandled exceptions.
            If the timeout is reached, all threads will be killed and their corresponding actions will not complete.  This can leave data in an 
            undefined state, for example, if an action times out before instantiating an object, the object will be null.
            Throws exception on main thread if any action throws and unhandled exception and no onException was provided.</summary>
        </member>
        <member name="M:CodeBase.ODThread.WakeUpThreadsByGroupName(System.String)">
            <summary>Wakes up all threads with the passed in group name if there are any.</summary>
        </member>
        <member name="T:CodeBase.ODThread.WorkerDelegate">
            <summary>Pointer delegate to the method that does the work for this thread.  The worker method has to take an ODThread as a parameter so that it has access to Tag and other variables when needed.</summary>
        </member>
        <member name="T:CodeBase.ODThread.ExceptionDelegate">
            <summary>Pointer delegate to the method that gets called when the worker delegate throws an unhandled exception.</summary>
        </member>
        <member name="M:CodeBase.ODThread.RegisterForUnhandledExceptions(System.Windows.Forms.Control,System.Action{System.Exception,System.String})">
            <summary>Program entry of any application using ODThread call this method and provide the Application.Run's form/control. 
            Any unhandled exception originating from an ODThread will be passed along through this handler.
            The handler instance is responsible for joining back to the main thread, reporting the error, and exiting the program. 
            Failing to register here in your application will result in unhandled exceptions in ODThread killing your program without any on-screen feedback and
            a vague event blaming KERNELBASE.dll will be posted to the event viewer.</summary>
        </member>
        <member name="T:CodeBase.NamedResetEvent">
            <summary>This class simply wraps EventWaitHandle so each WaitEvent can be given a name. Used for logging.</summary>
        </member>
        <member name="F:CodeBase.NamedResetEvent._waitEvent">
            <summary>Sleep timer which can be interrupted elegantly.</summary>
        </member>
        <member name="M:CodeBase.NamedResetEvent.Set">
            <summary>Pass through to EventWaitHandle.Wait().</summary>
        </member>
        <member name="M:CodeBase.NamedResetEvent.WaitOne(System.Int32)">
            <summary>Pass through to WaitHandle.WaitOne().</summary>
        </member>
        <member name="T:CodeBase.IODThread">
            <summary>This interface is needed for the MakeThread method so that we don't have to copy additional files to the UpdateFileCopier project.</summary>
        </member>
        <member name="F:CodeBase.ODThreadAbs._isInit">
            <summary>Used to identify whether or not an ODThread has been initialized.  
            This is used to avoid creating more instances of the same thread from ODThread.MakeThread()</summary>
        </member>
        <member name="P:CodeBase.ODThreadAbs.LogLevelThread">
            <summary>The default level at which this thread should log.</summary>
        </member>
        <member name="M:CodeBase.ODThreadAbs.GetLogDirectoryName">
            <summary>The directory in \OpenDental\OpenDentalService\Logger that holds the log files that are written to by CodeBase.Logger.cs</summary>
        </member>
        <member name="M:CodeBase.ODThreadAbs.GetThreadName">
            <summary>The name of the thread for debugging/development purposes.</summary>
        </member>
        <member name="M:CodeBase.ODThreadAbs.GetThreadRunIntervalMS">
            <summary>The interval of time in milliseconds to wait between calling OnThreadRun</summary>
        </member>
        <member name="M:CodeBase.ODThreadAbs.OnThreadRun(CodeBase.ODThread)">
            <summary>What the thread does every time the specified interval of time has passed.</summary>
        </member>
        <member name="M:CodeBase.ODThreadAbs.OnThreadException(System.Exception)">
            <summary>What the thread does when it catches an unhandled exception.</summary>
        </member>
        <member name="M:CodeBase.ODThreadAbs.OnThreadExit(CodeBase.ODThread)">
            <summary>What the thread does right before it dies.</summary>
        </member>
        <member name="M:CodeBase.ODThreadAbs.Stop">
            <summary>Asynchronously stops the thread.  Guards against re-entrance.</summary>
        </member>
        <member name="M:CodeBase.UIHelper.ForceBringToFront(System.Windows.Forms.Form)">
            <summary>Sometimes ODProgress can cause other forms to open up behind other applications. Call this method to force this form to the front.</summary>
        </member>
        <member name="M:CodeBase.UIHelper.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Takes a number of elements from the end of the enumerable.</summary>
        </member>
        <member name="M:CodeBase.UIHelper.GetAllControls(System.Windows.Forms.Control)">
            <summary>Gets all controls and their children controls recursively.</summary>
        </member>
        <member name="M:CodeBase.UIHelper.ShowThen(System.Windows.Forms.Form,System.Action)">
            <summary>Shows a form nonmodally then performs the given action when the form closes.</summary>
        </member>
    </members>
</doc>
