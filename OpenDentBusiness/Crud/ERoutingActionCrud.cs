//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class ERoutingActionCrud {
		///<summary>Gets one ERoutingAction object from the database using the primary key.  Returns null if not found.</summary>
		public static ERoutingAction SelectOne(long eroutingActionNum) {
			string command="SELECT * FROM eroutingaction "
				+"WHERE ERoutingActionNum = "+POut.Long(eroutingActionNum);
			List<ERoutingAction> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ERoutingAction object from the database using a query.</summary>
		public static ERoutingAction SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ERoutingAction> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ERoutingAction objects from the database using a query.</summary>
		public static List<ERoutingAction> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ERoutingAction> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<ERoutingAction> TableToList(DataTable table) {
			List<ERoutingAction> retVal=new List<ERoutingAction>();
			ERoutingAction eroutingAction;
			foreach(DataRow row in table.Rows) {
				eroutingAction=new ERoutingAction();
				eroutingAction.ERoutingActionNum   = PIn.Long  (row["ERoutingActionNum"].ToString());
				eroutingAction.ERoutingNum         = PIn.Long  (row["ERoutingNum"].ToString());
				eroutingAction.ItemOrder       = PIn.Int   (row["ItemOrder"].ToString());
				eroutingAction.ERoutingActionType  = (OpenDentBusiness.EnumERoutingActionType)PIn.Int(row["ERoutingActionType"].ToString());
				eroutingAction.UserNum         = PIn.Long  (row["UserNum"].ToString());
				eroutingAction.IsComplete      = PIn.Bool  (row["IsComplete"].ToString());
				eroutingAction.DateTimeComplete= PIn.DateT (row["DateTimeComplete"].ToString());
				retVal.Add(eroutingAction);
			}
			return retVal;
		}

		///<summary>Converts a list of ERoutingAction into a DataTable.</summary>
		public static DataTable ListToTable(List<ERoutingAction> listERoutingActions,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="ERoutingAction";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ERoutingActionNum");
			table.Columns.Add("ERoutingNum");
			table.Columns.Add("ItemOrder");
			table.Columns.Add("ERoutingActionType");
			table.Columns.Add("UserNum");
			table.Columns.Add("IsComplete");
			table.Columns.Add("DateTimeComplete");
			foreach(ERoutingAction eroutingAction in listERoutingActions) {
				table.Rows.Add(new object[] {
					POut.Long  (eroutingAction.ERoutingActionNum),
					POut.Long  (eroutingAction.ERoutingNum),
					POut.Int   (eroutingAction.ItemOrder),
					POut.Int   ((int)eroutingAction.ERoutingActionType),
					POut.Long  (eroutingAction.UserNum),
					POut.Bool  (eroutingAction.IsComplete),
					POut.DateT (eroutingAction.DateTimeComplete,false),
				});
			}
			return table;
		}

		///<summary>Inserts one ERoutingAction into the database.  Returns the new priKey.</summary>
		public static long Insert(ERoutingAction eroutingAction) {
			return Insert(eroutingAction,false);
		}

		///<summary>Inserts one ERoutingAction into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(ERoutingAction eroutingAction,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				eroutingAction.ERoutingActionNum=ReplicationServers.GetKey("eroutingaction","ERoutingActionNum");
			}
			string command="INSERT INTO eroutingaction (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ERoutingActionNum,";
			}
			command+="ERoutingNum,ItemOrder,ERoutingActionType,UserNum,IsComplete,DateTimeComplete) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(eroutingAction.ERoutingActionNum)+",";
			}
			command+=
				     POut.Long  (eroutingAction.ERoutingNum)+","
				+    POut.Int   (eroutingAction.ItemOrder)+","
				+    POut.Int   ((int)eroutingAction.ERoutingActionType)+","
				+    POut.Long  (eroutingAction.UserNum)+","
				+    POut.Bool  (eroutingAction.IsComplete)+","
				+    POut.DateT (eroutingAction.DateTimeComplete)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				eroutingAction.ERoutingActionNum=Db.NonQ(command,true,"ERoutingActionNum","eroutingAction");
			}
			return eroutingAction.ERoutingActionNum;
		}

		///<summary>Inserts one ERoutingAction into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ERoutingAction eroutingAction) {
			return InsertNoCache(eroutingAction,false);
		}

		///<summary>Inserts one ERoutingAction into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ERoutingAction eroutingAction,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO eroutingaction (";
			if(!useExistingPK && isRandomKeys) {
				eroutingAction.ERoutingActionNum=ReplicationServers.GetKeyNoCache("eroutingaction","ERoutingActionNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ERoutingActionNum,";
			}
			command+="ERoutingNum,ItemOrder,ERoutingActionType,UserNum,IsComplete,DateTimeComplete) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(eroutingAction.ERoutingActionNum)+",";
			}
			command+=
				     POut.Long  (eroutingAction.ERoutingNum)+","
				+    POut.Int   (eroutingAction.ItemOrder)+","
				+    POut.Int   ((int)eroutingAction.ERoutingActionType)+","
				+    POut.Long  (eroutingAction.UserNum)+","
				+    POut.Bool  (eroutingAction.IsComplete)+","
				+    POut.DateT (eroutingAction.DateTimeComplete)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				eroutingAction.ERoutingActionNum=Db.NonQ(command,true,"ERoutingActionNum","eroutingAction");
			}
			return eroutingAction.ERoutingActionNum;
		}

		///<summary>Updates one ERoutingAction in the database.</summary>
		public static void Update(ERoutingAction eroutingAction) {
			string command="UPDATE eroutingaction SET "
				+"ERoutingNum         =  "+POut.Long  (eroutingAction.ERoutingNum)+", "
				+"ItemOrder       =  "+POut.Int   (eroutingAction.ItemOrder)+", "
				+"ERoutingActionType  =  "+POut.Int   ((int)eroutingAction.ERoutingActionType)+", "
				+"UserNum         =  "+POut.Long  (eroutingAction.UserNum)+", "
				+"IsComplete      =  "+POut.Bool  (eroutingAction.IsComplete)+", "
				+"DateTimeComplete=  "+POut.DateT (eroutingAction.DateTimeComplete)+" "
				+"WHERE ERoutingActionNum = "+POut.Long(eroutingAction.ERoutingActionNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ERoutingAction in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(ERoutingAction eroutingAction,ERoutingAction oldERoutingAction) {
			string command="";
			if(eroutingAction.ERoutingNum != oldERoutingAction.ERoutingNum) {
				if(command!="") { command+=",";}
				command+="ERoutingNum = "+POut.Long(eroutingAction.ERoutingNum)+"";
			}
			if(eroutingAction.ItemOrder != oldERoutingAction.ItemOrder) {
				if(command!="") { command+=",";}
				command+="ItemOrder = "+POut.Int(eroutingAction.ItemOrder)+"";
			}
			if(eroutingAction.ERoutingActionType != oldERoutingAction.ERoutingActionType) {
				if(command!="") { command+=",";}
				command+="ERoutingActionType = "+POut.Int   ((int)eroutingAction.ERoutingActionType)+"";
			}
			if(eroutingAction.UserNum != oldERoutingAction.UserNum) {
				if(command!="") { command+=",";}
				command+="UserNum = "+POut.Long(eroutingAction.UserNum)+"";
			}
			if(eroutingAction.IsComplete != oldERoutingAction.IsComplete) {
				if(command!="") { command+=",";}
				command+="IsComplete = "+POut.Bool(eroutingAction.IsComplete)+"";
			}
			if(eroutingAction.DateTimeComplete != oldERoutingAction.DateTimeComplete) {
				if(command!="") { command+=",";}
				command+="DateTimeComplete = "+POut.DateT(eroutingAction.DateTimeComplete)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE eroutingaction SET "+command
				+" WHERE ERoutingActionNum = "+POut.Long(eroutingAction.ERoutingActionNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(ERoutingAction,ERoutingAction) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(ERoutingAction eroutingAction,ERoutingAction oldERoutingAction) {
			if(eroutingAction.ERoutingNum != oldERoutingAction.ERoutingNum) {
				return true;
			}
			if(eroutingAction.ItemOrder != oldERoutingAction.ItemOrder) {
				return true;
			}
			if(eroutingAction.ERoutingActionType != oldERoutingAction.ERoutingActionType) {
				return true;
			}
			if(eroutingAction.UserNum != oldERoutingAction.UserNum) {
				return true;
			}
			if(eroutingAction.IsComplete != oldERoutingAction.IsComplete) {
				return true;
			}
			if(eroutingAction.DateTimeComplete != oldERoutingAction.DateTimeComplete) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one ERoutingAction from the database.</summary>
		public static void Delete(long eroutingActionNum) {
			string command="DELETE FROM eroutingaction "
				+"WHERE ERoutingActionNum = "+POut.Long(eroutingActionNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many ERoutingActions from the database.</summary>
		public static void DeleteMany(List<long> listERoutingActionNums) {
			if(listERoutingActionNums==null || listERoutingActionNums.Count==0) {
				return;
			}
			string command="DELETE FROM eroutingaction "
				+"WHERE ERoutingActionNum IN("+string.Join(",",listERoutingActionNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}