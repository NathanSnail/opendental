//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class FlowActionCrud {
		///<summary>Gets one FlowAction object from the database using the primary key.  Returns null if not found.</summary>
		public static FlowAction SelectOne(long flowActionNum) {
			string command="SELECT * FROM flowaction "
				+"WHERE FlowActionNum = "+POut.Long(flowActionNum);
			List<FlowAction> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one FlowAction object from the database using a query.</summary>
		public static FlowAction SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<FlowAction> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of FlowAction objects from the database using a query.</summary>
		public static List<FlowAction> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<FlowAction> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<FlowAction> TableToList(DataTable table) {
			List<FlowAction> retVal=new List<FlowAction>();
			FlowAction flowAction;
			foreach(DataRow row in table.Rows) {
				flowAction=new FlowAction();
				flowAction.FlowActionNum   = PIn.Long  (row["FlowActionNum"].ToString());
				flowAction.FlowNum         = PIn.Long  (row["FlowNum"].ToString());
				flowAction.ItemOrder       = PIn.Int   (row["ItemOrder"].ToString());
				flowAction.FlowActionType  = (OpenDentBusiness.EnumFlowActionType)PIn.Int(row["FlowActionType"].ToString());
				flowAction.UserNum         = PIn.Long  (row["UserNum"].ToString());
				flowAction.IsComplete      = PIn.Bool  (row["IsComplete"].ToString());
				flowAction.DateTimeComplete= PIn.DateT (row["DateTimeComplete"].ToString());
				retVal.Add(flowAction);
			}
			return retVal;
		}

		///<summary>Converts a list of FlowAction into a DataTable.</summary>
		public static DataTable ListToTable(List<FlowAction> listFlowActions,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="FlowAction";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("FlowActionNum");
			table.Columns.Add("FlowNum");
			table.Columns.Add("ItemOrder");
			table.Columns.Add("FlowActionType");
			table.Columns.Add("UserNum");
			table.Columns.Add("IsComplete");
			table.Columns.Add("DateTimeComplete");
			foreach(FlowAction flowAction in listFlowActions) {
				table.Rows.Add(new object[] {
					POut.Long  (flowAction.FlowActionNum),
					POut.Long  (flowAction.FlowNum),
					POut.Int   (flowAction.ItemOrder),
					POut.Int   ((int)flowAction.FlowActionType),
					POut.Long  (flowAction.UserNum),
					POut.Bool  (flowAction.IsComplete),
					POut.DateT (flowAction.DateTimeComplete,false),
				});
			}
			return table;
		}

		///<summary>Inserts one FlowAction into the database.  Returns the new priKey.</summary>
		public static long Insert(FlowAction flowAction) {
			return Insert(flowAction,false);
		}

		///<summary>Inserts one FlowAction into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(FlowAction flowAction,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				flowAction.FlowActionNum=ReplicationServers.GetKey("flowaction","FlowActionNum");
			}
			string command="INSERT INTO flowaction (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="FlowActionNum,";
			}
			command+="FlowNum,ItemOrder,FlowActionType,UserNum,IsComplete,DateTimeComplete) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(flowAction.FlowActionNum)+",";
			}
			command+=
				     POut.Long  (flowAction.FlowNum)+","
				+    POut.Int   (flowAction.ItemOrder)+","
				+    POut.Int   ((int)flowAction.FlowActionType)+","
				+    POut.Long  (flowAction.UserNum)+","
				+    POut.Bool  (flowAction.IsComplete)+","
				+    POut.DateT (flowAction.DateTimeComplete)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				flowAction.FlowActionNum=Db.NonQ(command,true,"FlowActionNum","flowAction");
			}
			return flowAction.FlowActionNum;
		}

		///<summary>Inserts one FlowAction into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(FlowAction flowAction) {
			return InsertNoCache(flowAction,false);
		}

		///<summary>Inserts one FlowAction into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(FlowAction flowAction,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO flowaction (";
			if(!useExistingPK && isRandomKeys) {
				flowAction.FlowActionNum=ReplicationServers.GetKeyNoCache("flowaction","FlowActionNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="FlowActionNum,";
			}
			command+="FlowNum,ItemOrder,FlowActionType,UserNum,IsComplete,DateTimeComplete) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(flowAction.FlowActionNum)+",";
			}
			command+=
				     POut.Long  (flowAction.FlowNum)+","
				+    POut.Int   (flowAction.ItemOrder)+","
				+    POut.Int   ((int)flowAction.FlowActionType)+","
				+    POut.Long  (flowAction.UserNum)+","
				+    POut.Bool  (flowAction.IsComplete)+","
				+    POut.DateT (flowAction.DateTimeComplete)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				flowAction.FlowActionNum=Db.NonQ(command,true,"FlowActionNum","flowAction");
			}
			return flowAction.FlowActionNum;
		}

		///<summary>Updates one FlowAction in the database.</summary>
		public static void Update(FlowAction flowAction) {
			string command="UPDATE flowaction SET "
				+"FlowNum         =  "+POut.Long  (flowAction.FlowNum)+", "
				+"ItemOrder       =  "+POut.Int   (flowAction.ItemOrder)+", "
				+"FlowActionType  =  "+POut.Int   ((int)flowAction.FlowActionType)+", "
				+"UserNum         =  "+POut.Long  (flowAction.UserNum)+", "
				+"IsComplete      =  "+POut.Bool  (flowAction.IsComplete)+", "
				+"DateTimeComplete=  "+POut.DateT (flowAction.DateTimeComplete)+" "
				+"WHERE FlowActionNum = "+POut.Long(flowAction.FlowActionNum);
			Db.NonQ(command);
		}

		///<summary>Updates one FlowAction in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(FlowAction flowAction,FlowAction oldFlowAction) {
			string command="";
			if(flowAction.FlowNum != oldFlowAction.FlowNum) {
				if(command!="") { command+=",";}
				command+="FlowNum = "+POut.Long(flowAction.FlowNum)+"";
			}
			if(flowAction.ItemOrder != oldFlowAction.ItemOrder) {
				if(command!="") { command+=",";}
				command+="ItemOrder = "+POut.Int(flowAction.ItemOrder)+"";
			}
			if(flowAction.FlowActionType != oldFlowAction.FlowActionType) {
				if(command!="") { command+=",";}
				command+="FlowActionType = "+POut.Int   ((int)flowAction.FlowActionType)+"";
			}
			if(flowAction.UserNum != oldFlowAction.UserNum) {
				if(command!="") { command+=",";}
				command+="UserNum = "+POut.Long(flowAction.UserNum)+"";
			}
			if(flowAction.IsComplete != oldFlowAction.IsComplete) {
				if(command!="") { command+=",";}
				command+="IsComplete = "+POut.Bool(flowAction.IsComplete)+"";
			}
			if(flowAction.DateTimeComplete != oldFlowAction.DateTimeComplete) {
				if(command!="") { command+=",";}
				command+="DateTimeComplete = "+POut.DateT(flowAction.DateTimeComplete)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE flowaction SET "+command
				+" WHERE FlowActionNum = "+POut.Long(flowAction.FlowActionNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(FlowAction,FlowAction) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(FlowAction flowAction,FlowAction oldFlowAction) {
			if(flowAction.FlowNum != oldFlowAction.FlowNum) {
				return true;
			}
			if(flowAction.ItemOrder != oldFlowAction.ItemOrder) {
				return true;
			}
			if(flowAction.FlowActionType != oldFlowAction.FlowActionType) {
				return true;
			}
			if(flowAction.UserNum != oldFlowAction.UserNum) {
				return true;
			}
			if(flowAction.IsComplete != oldFlowAction.IsComplete) {
				return true;
			}
			if(flowAction.DateTimeComplete != oldFlowAction.DateTimeComplete) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one FlowAction from the database.</summary>
		public static void Delete(long flowActionNum) {
			string command="DELETE FROM flowaction "
				+"WHERE FlowActionNum = "+POut.Long(flowActionNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many FlowActions from the database.</summary>
		public static void DeleteMany(List<long> listFlowActionNums) {
			if(listFlowActionNums==null || listFlowActionNums.Count==0) {
				return;
			}
			string command="DELETE FROM flowaction "
				+"WHERE FlowActionNum IN("+string.Join(",",listFlowActionNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}