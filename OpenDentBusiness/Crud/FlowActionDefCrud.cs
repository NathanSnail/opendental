//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class FlowActionDefCrud {
		///<summary>Gets one FlowActionDef object from the database using the primary key.  Returns null if not found.</summary>
		public static FlowActionDef SelectOne(long flowActionDefNum) {
			string command="SELECT * FROM flowactiondef "
				+"WHERE FlowActionDefNum = "+POut.Long(flowActionDefNum);
			List<FlowActionDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one FlowActionDef object from the database using a query.</summary>
		public static FlowActionDef SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<FlowActionDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of FlowActionDef objects from the database using a query.</summary>
		public static List<FlowActionDef> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<FlowActionDef> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<FlowActionDef> TableToList(DataTable table) {
			List<FlowActionDef> retVal=new List<FlowActionDef>();
			FlowActionDef flowActionDef;
			foreach(DataRow row in table.Rows) {
				flowActionDef=new FlowActionDef();
				flowActionDef.FlowActionDefNum = PIn.Long  (row["FlowActionDefNum"].ToString());
				flowActionDef.FlowDefNum       = PIn.Long  (row["FlowDefNum"].ToString());
				flowActionDef.FlowActionType   = (OpenDentBusiness.EnumFlowActionType)PIn.Int(row["FlowActionType"].ToString());
				flowActionDef.ItemOrder        = PIn.Int   (row["ItemOrder"].ToString());
				flowActionDef.SecDateTEntry    = PIn.DateT (row["SecDateTEntry"].ToString());
				flowActionDef.DateTLastModified= PIn.DateT (row["DateTLastModified"].ToString());
				retVal.Add(flowActionDef);
			}
			return retVal;
		}

		///<summary>Converts a list of FlowActionDef into a DataTable.</summary>
		public static DataTable ListToTable(List<FlowActionDef> listFlowActionDefs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="FlowActionDef";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("FlowActionDefNum");
			table.Columns.Add("FlowDefNum");
			table.Columns.Add("FlowActionType");
			table.Columns.Add("ItemOrder");
			table.Columns.Add("SecDateTEntry");
			table.Columns.Add("DateTLastModified");
			foreach(FlowActionDef flowActionDef in listFlowActionDefs) {
				table.Rows.Add(new object[] {
					POut.Long  (flowActionDef.FlowActionDefNum),
					POut.Long  (flowActionDef.FlowDefNum),
					POut.Int   ((int)flowActionDef.FlowActionType),
					POut.Int   (flowActionDef.ItemOrder),
					POut.DateT (flowActionDef.SecDateTEntry,false),
					POut.DateT (flowActionDef.DateTLastModified,false),
				});
			}
			return table;
		}

		///<summary>Inserts one FlowActionDef into the database.  Returns the new priKey.</summary>
		public static long Insert(FlowActionDef flowActionDef) {
			return Insert(flowActionDef,false);
		}

		///<summary>Inserts one FlowActionDef into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(FlowActionDef flowActionDef,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				flowActionDef.FlowActionDefNum=ReplicationServers.GetKey("flowactiondef","FlowActionDefNum");
			}
			string command="INSERT INTO flowactiondef (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="FlowActionDefNum,";
			}
			command+="FlowDefNum,FlowActionType,ItemOrder,SecDateTEntry,DateTLastModified) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(flowActionDef.FlowActionDefNum)+",";
			}
			command+=
				     POut.Long  (flowActionDef.FlowDefNum)+","
				+    POut.Int   ((int)flowActionDef.FlowActionType)+","
				+    POut.Int   (flowActionDef.ItemOrder)+","
				+    DbHelper.Now()+","
				+    POut.DateT (flowActionDef.DateTLastModified)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				flowActionDef.FlowActionDefNum=Db.NonQ(command,true,"FlowActionDefNum","flowActionDef");
			}
			return flowActionDef.FlowActionDefNum;
		}

		///<summary>Inserts one FlowActionDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(FlowActionDef flowActionDef) {
			return InsertNoCache(flowActionDef,false);
		}

		///<summary>Inserts one FlowActionDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(FlowActionDef flowActionDef,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO flowactiondef (";
			if(!useExistingPK && isRandomKeys) {
				flowActionDef.FlowActionDefNum=ReplicationServers.GetKeyNoCache("flowactiondef","FlowActionDefNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="FlowActionDefNum,";
			}
			command+="FlowDefNum,FlowActionType,ItemOrder,SecDateTEntry,DateTLastModified) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(flowActionDef.FlowActionDefNum)+",";
			}
			command+=
				     POut.Long  (flowActionDef.FlowDefNum)+","
				+    POut.Int   ((int)flowActionDef.FlowActionType)+","
				+    POut.Int   (flowActionDef.ItemOrder)+","
				+    DbHelper.Now()+","
				+    POut.DateT (flowActionDef.DateTLastModified)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				flowActionDef.FlowActionDefNum=Db.NonQ(command,true,"FlowActionDefNum","flowActionDef");
			}
			return flowActionDef.FlowActionDefNum;
		}

		///<summary>Updates one FlowActionDef in the database.</summary>
		public static void Update(FlowActionDef flowActionDef) {
			string command="UPDATE flowactiondef SET "
				+"FlowDefNum       =  "+POut.Long  (flowActionDef.FlowDefNum)+", "
				+"FlowActionType   =  "+POut.Int   ((int)flowActionDef.FlowActionType)+", "
				+"ItemOrder        =  "+POut.Int   (flowActionDef.ItemOrder)+", "
				//SecDateTEntry not allowed to change
				+"DateTLastModified=  "+POut.DateT (flowActionDef.DateTLastModified)+" "
				+"WHERE FlowActionDefNum = "+POut.Long(flowActionDef.FlowActionDefNum);
			Db.NonQ(command);
		}

		///<summary>Updates one FlowActionDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(FlowActionDef flowActionDef,FlowActionDef oldFlowActionDef) {
			string command="";
			if(flowActionDef.FlowDefNum != oldFlowActionDef.FlowDefNum) {
				if(command!="") { command+=",";}
				command+="FlowDefNum = "+POut.Long(flowActionDef.FlowDefNum)+"";
			}
			if(flowActionDef.FlowActionType != oldFlowActionDef.FlowActionType) {
				if(command!="") { command+=",";}
				command+="FlowActionType = "+POut.Int   ((int)flowActionDef.FlowActionType)+"";
			}
			if(flowActionDef.ItemOrder != oldFlowActionDef.ItemOrder) {
				if(command!="") { command+=",";}
				command+="ItemOrder = "+POut.Int(flowActionDef.ItemOrder)+"";
			}
			//SecDateTEntry not allowed to change
			if(flowActionDef.DateTLastModified != oldFlowActionDef.DateTLastModified) {
				if(command!="") { command+=",";}
				command+="DateTLastModified = "+POut.DateT(flowActionDef.DateTLastModified)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE flowactiondef SET "+command
				+" WHERE FlowActionDefNum = "+POut.Long(flowActionDef.FlowActionDefNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(FlowActionDef,FlowActionDef) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(FlowActionDef flowActionDef,FlowActionDef oldFlowActionDef) {
			if(flowActionDef.FlowDefNum != oldFlowActionDef.FlowDefNum) {
				return true;
			}
			if(flowActionDef.FlowActionType != oldFlowActionDef.FlowActionType) {
				return true;
			}
			if(flowActionDef.ItemOrder != oldFlowActionDef.ItemOrder) {
				return true;
			}
			//SecDateTEntry not allowed to change
			if(flowActionDef.DateTLastModified != oldFlowActionDef.DateTLastModified) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one FlowActionDef from the database.</summary>
		public static void Delete(long flowActionDefNum) {
			string command="DELETE FROM flowactiondef "
				+"WHERE FlowActionDefNum = "+POut.Long(flowActionDefNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many FlowActionDefs from the database.</summary>
		public static void DeleteMany(List<long> listFlowActionDefNums) {
			if(listFlowActionDefNums==null || listFlowActionDefNums.Count==0) {
				return;
			}
			string command="DELETE FROM flowactiondef "
				+"WHERE FlowActionDefNum IN("+string.Join(",",listFlowActionDefNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}