//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class FlowDefCrud {
		///<summary>Gets one FlowDef object from the database using the primary key.  Returns null if not found.</summary>
		public static FlowDef SelectOne(long flowDefNum) {
			string command="SELECT * FROM flowdef "
				+"WHERE FlowDefNum = "+POut.Long(flowDefNum);
			List<FlowDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one FlowDef object from the database using a query.</summary>
		public static FlowDef SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<FlowDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of FlowDef objects from the database using a query.</summary>
		public static List<FlowDef> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<FlowDef> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<FlowDef> TableToList(DataTable table) {
			List<FlowDef> retVal=new List<FlowDef>();
			FlowDef flowDef;
			foreach(DataRow row in table.Rows) {
				flowDef=new FlowDef();
				flowDef.FlowDefNum      = PIn.Long  (row["FlowDefNum"].ToString());
				flowDef.ClinicNum       = PIn.Long  (row["ClinicNum"].ToString());
				flowDef.Description     = PIn.String(row["Description"].ToString());
				flowDef.UserNumCreated  = PIn.Long  (row["UserNumCreated"].ToString());
				flowDef.UserNumModified = PIn.Long  (row["UserNumModified"].ToString());
				flowDef.SecDateTEntered = PIn.DateT (row["SecDateTEntered"].ToString());
				flowDef.DateLastModified= PIn.DateT (row["DateLastModified"].ToString());
				retVal.Add(flowDef);
			}
			return retVal;
		}

		///<summary>Converts a list of FlowDef into a DataTable.</summary>
		public static DataTable ListToTable(List<FlowDef> listFlowDefs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="FlowDef";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("FlowDefNum");
			table.Columns.Add("ClinicNum");
			table.Columns.Add("Description");
			table.Columns.Add("UserNumCreated");
			table.Columns.Add("UserNumModified");
			table.Columns.Add("SecDateTEntered");
			table.Columns.Add("DateLastModified");
			foreach(FlowDef flowDef in listFlowDefs) {
				table.Rows.Add(new object[] {
					POut.Long  (flowDef.FlowDefNum),
					POut.Long  (flowDef.ClinicNum),
					            flowDef.Description,
					POut.Long  (flowDef.UserNumCreated),
					POut.Long  (flowDef.UserNumModified),
					POut.DateT (flowDef.SecDateTEntered,false),
					POut.DateT (flowDef.DateLastModified,false),
				});
			}
			return table;
		}

		///<summary>Inserts one FlowDef into the database.  Returns the new priKey.</summary>
		public static long Insert(FlowDef flowDef) {
			return Insert(flowDef,false);
		}

		///<summary>Inserts one FlowDef into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(FlowDef flowDef,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				flowDef.FlowDefNum=ReplicationServers.GetKey("flowdef","FlowDefNum");
			}
			string command="INSERT INTO flowdef (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="FlowDefNum,";
			}
			command+="ClinicNum,Description,UserNumCreated,UserNumModified,SecDateTEntered,DateLastModified) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(flowDef.FlowDefNum)+",";
			}
			command+=
				     POut.Long  (flowDef.ClinicNum)+","
				+"'"+POut.String(flowDef.Description)+"',"
				+    POut.Long  (flowDef.UserNumCreated)+","
				+    POut.Long  (flowDef.UserNumModified)+","
				+    DbHelper.Now()+","
				+    POut.DateT (flowDef.DateLastModified)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				flowDef.FlowDefNum=Db.NonQ(command,true,"FlowDefNum","flowDef");
			}
			return flowDef.FlowDefNum;
		}

		///<summary>Inserts one FlowDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(FlowDef flowDef) {
			return InsertNoCache(flowDef,false);
		}

		///<summary>Inserts one FlowDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(FlowDef flowDef,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO flowdef (";
			if(!useExistingPK && isRandomKeys) {
				flowDef.FlowDefNum=ReplicationServers.GetKeyNoCache("flowdef","FlowDefNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="FlowDefNum,";
			}
			command+="ClinicNum,Description,UserNumCreated,UserNumModified,SecDateTEntered,DateLastModified) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(flowDef.FlowDefNum)+",";
			}
			command+=
				     POut.Long  (flowDef.ClinicNum)+","
				+"'"+POut.String(flowDef.Description)+"',"
				+    POut.Long  (flowDef.UserNumCreated)+","
				+    POut.Long  (flowDef.UserNumModified)+","
				+    DbHelper.Now()+","
				+    POut.DateT (flowDef.DateLastModified)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				flowDef.FlowDefNum=Db.NonQ(command,true,"FlowDefNum","flowDef");
			}
			return flowDef.FlowDefNum;
		}

		///<summary>Updates one FlowDef in the database.</summary>
		public static void Update(FlowDef flowDef) {
			string command="UPDATE flowdef SET "
				+"ClinicNum       =  "+POut.Long  (flowDef.ClinicNum)+", "
				+"Description     = '"+POut.String(flowDef.Description)+"', "
				+"UserNumCreated  =  "+POut.Long  (flowDef.UserNumCreated)+", "
				+"UserNumModified =  "+POut.Long  (flowDef.UserNumModified)+", "
				//SecDateTEntered not allowed to change
				+"DateLastModified=  "+POut.DateT (flowDef.DateLastModified)+" "
				+"WHERE FlowDefNum = "+POut.Long(flowDef.FlowDefNum);
			Db.NonQ(command);
		}

		///<summary>Updates one FlowDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(FlowDef flowDef,FlowDef oldFlowDef) {
			string command="";
			if(flowDef.ClinicNum != oldFlowDef.ClinicNum) {
				if(command!="") { command+=",";}
				command+="ClinicNum = "+POut.Long(flowDef.ClinicNum)+"";
			}
			if(flowDef.Description != oldFlowDef.Description) {
				if(command!="") { command+=",";}
				command+="Description = '"+POut.String(flowDef.Description)+"'";
			}
			if(flowDef.UserNumCreated != oldFlowDef.UserNumCreated) {
				if(command!="") { command+=",";}
				command+="UserNumCreated = "+POut.Long(flowDef.UserNumCreated)+"";
			}
			if(flowDef.UserNumModified != oldFlowDef.UserNumModified) {
				if(command!="") { command+=",";}
				command+="UserNumModified = "+POut.Long(flowDef.UserNumModified)+"";
			}
			//SecDateTEntered not allowed to change
			if(flowDef.DateLastModified != oldFlowDef.DateLastModified) {
				if(command!="") { command+=",";}
				command+="DateLastModified = "+POut.DateT(flowDef.DateLastModified)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE flowdef SET "+command
				+" WHERE FlowDefNum = "+POut.Long(flowDef.FlowDefNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(FlowDef,FlowDef) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(FlowDef flowDef,FlowDef oldFlowDef) {
			if(flowDef.ClinicNum != oldFlowDef.ClinicNum) {
				return true;
			}
			if(flowDef.Description != oldFlowDef.Description) {
				return true;
			}
			if(flowDef.UserNumCreated != oldFlowDef.UserNumCreated) {
				return true;
			}
			if(flowDef.UserNumModified != oldFlowDef.UserNumModified) {
				return true;
			}
			//SecDateTEntered not allowed to change
			if(flowDef.DateLastModified != oldFlowDef.DateLastModified) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one FlowDef from the database.</summary>
		public static void Delete(long flowDefNum) {
			string command="DELETE FROM flowdef "
				+"WHERE FlowDefNum = "+POut.Long(flowDefNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many FlowDefs from the database.</summary>
		public static void DeleteMany(List<long> listFlowDefNums) {
			if(listFlowDefNums==null || listFlowDefNums.Count==0) {
				return;
			}
			string command="DELETE FROM flowdef "
				+"WHERE FlowDefNum IN("+string.Join(",",listFlowDefNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}