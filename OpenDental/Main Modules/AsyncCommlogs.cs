using OpenDentBusiness;
using OpenDentBusiness.Mobile;
using OpenDentBusiness.WebTypes;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Web.UI.WebControls;
using System.Xml;
using Task = System.Threading.Tasks.Task;

namespace OpenDental.Main_Modules
{
    internal static class AsyncCommlogs
    {
        private static HttpClient sharedClient = new HttpClient()
        {
            BaseAddress = new Uri("http://localhost:9710/"),
        };
        private static string auth = null;

        async public static void Test()
        {
            if (auth == null)
            {
                foreach (string line in File.ReadLines("./auth"))
                {
                    if (line.Contains("&"))
                    {
                        auth = line;
                    }
                }
            }
            string send = "http/request-received-messages?&order=newest&" + auth;
            while (true)
            {

                try
                {
                    await Task.Delay(60 * 1000); // this is at start because there are race conditions i don't want to fix. We need to wait for init to be done before we can use comlogs
                    Console.WriteLine("!!");
                    bool done = false;
                    int count = 1;
                    int offset = 0;
                    while (!done)
                    {
                        var response = await sharedClient.GetAsync(send + "&" + count);
                        var text = await response.Content.ReadAsStringAsync();
                        XmlDocument xmlDoc = new XmlDocument();
                        xmlDoc.LoadXml(text);
                        var list = xmlDoc.ChildNodes[1];
                        int c = 0;
                        foreach (XmlElement child in list.ChildNodes)
                        {
                            Console.WriteLine("count");
                            Console.WriteLine(count.ToString());
                            if (c < offset)
                            {
                                continue;
                            }
                            c++;
                            string from = child.ChildNodes[0].InnerText; // diafaan doesn't use xml properly so its not nice and looks like this.
                            Console.WriteLine(from);
                            string msgText = child.ChildNodes[2].InnerText;
                            Console.WriteLine(msgText);
                            string msgTime = child.ChildNodes[11].InnerText;
                            var time = DateTime.Parse(msgTime);
                            Console.WriteLine(msgText);
                            string guid = child.ChildNodes[4].InnerText;
                            if (File.Exists("./msg_guids/" + guid))
                            {
                                done = true;
                                break;
                            }
                            await File.Create("./msg_guids/" + guid).WriteAsync(Encoding.UTF8.GetBytes("this file is autogenerated by sms plugin"), 0, 0);

                            var patients = Patients.GetPatientsByPhone(from.Substring(3), "+64");
                            Console.WriteLine(patients.Count);
                            Commlog log = new Commlog();
                            if (patients.Count != 0)
                            {
                                log.PatNum = patients[0].PatNum;
                            }
                            log.Note = "Text message received: " + msgText;
                            log.Mode_ = CommItemMode.Text;
                            log.CommDateTime = time;
                            log.SentOrReceived = CommSentOrReceived.Received;
                            log.CommType = Commlogs.GetTypeAuto(CommItemTypeAuto.TEXT);
                            log.UserNum = Security.CurUser.UserNum;
                            var sms = new SmsFromMobile();
                            sms.CommlogNum = Commlogs.Insert(log);
                            sms.SmsFromMobileNum = long.Parse(from);
                            sms.PatNum = log.PatNum;
                            sms.DateTimeReceived = time;
                            sms.MsgText = msgText;
                            sms.SmsStatus = SmsFromStatus.ReceivedUnread;
                            OpenDentBusiness.SmsFromMobiles.Insert(sms);
                            //Alert ODMobile where applicable.
                            PushNotificationUtils.ODM_NewTextMessage(sms, sms.PatNum);
                        }
                        offset = count;
                        count *= 2;
                        Console.WriteLine(count);
                    }
                }
                catch
                {
                    MsgBox.Show("Receiving patient texts failed.");
                }
            }
        }
    }
}
